// Generated by ProtoGen, Version=2.4.1.555, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public static partial class OpenApiModelMessages
{

    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry)
    {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_ProtoOAPartnerDetails__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::ProtoOAPartnerDetails, global::ProtoOAPartnerDetails.Builder> internal__static_ProtoOAPartnerDetails__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_ProtoOAOrder__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::ProtoOAOrder, global::ProtoOAOrder.Builder> internal__static_ProtoOAOrder__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_ProtoOAPosition__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::ProtoOAPosition, global::ProtoOAPosition.Builder> internal__static_ProtoOAPosition__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_ProtoOAClosePositionDetails__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::ProtoOAClosePositionDetails, global::ProtoOAClosePositionDetails.Builder> internal__static_ProtoOAClosePositionDetails__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_ProtoOASpotSubscription__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::ProtoOASpotSubscription, global::ProtoOASpotSubscription.Builder> internal__static_ProtoOASpotSubscription__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_ProtoOASubscribedSpotSymbol__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::ProtoOASubscribedSpotSymbol, global::ProtoOASubscribedSpotSymbol.Builder> internal__static_ProtoOASubscribedSpotSymbol__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_ProtoOATrendbar__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::ProtoOATrendbar, global::ProtoOATrendbar.Builder> internal__static_ProtoOATrendbar__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor
    {
        get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;

    static OpenApiModelMessages()
    {
        byte[] descriptorData = global::System.Convert.FromBase64String(
            string.Concat(
              "ChpPcGVuQXBpTW9kZWxNZXNzYWdlcy5wcm90byIsChVQcm90b09BUGFydG5l",
              "ckRldGFpbHMSEwoLcGFydG5lck5hbWUYASACKAkiuwUKDFByb3RvT0FPcmRl",
              "chIPCgdvcmRlcklkGAEgAigDEhEKCWFjY291bnRJZBgCIAIoAxIkCglvcmRl",
              "clR5cGUYAyACKA4yES5Qcm90b09BT3JkZXJUeXBlEiIKCXRyYWRlU2lkZRgE",
              "IAIoDjIPLlByb3RvVHJhZGVTaWRlEhIKCnN5bWJvbE5hbWUYBSACKAkSFAoM",
              "Y2xvc2luZ09yZGVyGAYgAigIEhcKD3JlcXVlc3RlZFZvbHVtZRgHIAIoAxIW",
              "Cg5leGVjdXRlZFZvbHVtZRgIIAEoAxIWCg5leGVjdXRpb25QcmljZRgJIAEo",
              "ARISCgpsaW1pdFByaWNlGAogASgBEhEKCXN0b3BQcmljZRgLIAEoARIVCg1z",
              "dG9wTG9zc1ByaWNlGAwgASgBEhcKD3Rha2VQcm9maXRQcmljZRgNIAEoARIZ",
              "ChFiYXNlU2xpcHBhZ2VQcmljZRgOIAEoARIWCg5zbGlwcGFnZUluUGlwcxgP",
              "IAEoAxIeChZyZWxhdGl2ZVN0b3BMb3NzSW5QaXBzGBAgASgFEiAKGHJlbGF0",
              "aXZlVGFrZVByb2ZpdEluUGlwcxgRIAEoBRISCgpjb21taXNzaW9uGBIgASgD",
              "EhUKDW9wZW5UaW1lc3RhbXAYEyABKAMSFgoOY2xvc2VUaW1lc3RhbXAYFCAB",
              "KAMSGwoTZXhwaXJhdGlvblRpbWVzdGFtcBgVIAEoAxIPCgdjaGFubmVsGBYg",
              "ASgJEg8KB2NvbW1lbnQYFyABKAkSOgoUY2xvc2VQb3NpdGlvbkRldGFpbHMY",
              "GCABKAsyHC5Qcm90b09BQ2xvc2VQb3NpdGlvbkRldGFpbHMSFQoNY2xpZW50",
              "T3JkZXJJZBgZIAEoCRIPCgdzdG9wT3V0GBogASgIEhgKEHNsaXBwYWdlSW5Q",
              "b2ludHMYHyABKAUi5wIKD1Byb3RvT0FQb3NpdGlvbhISCgpwb3NpdGlvbklk",
              "GAEgAigDEhEKCWFjY291bnRJZBgCIAIoAxIuCg5wb3NpdGlvblN0YXR1cxgD",
              "IAIoDjIWLlByb3RvT0FQb3NpdGlvblN0YXR1cxIiCgl0cmFkZVNpZGUYBCAC",
              "KA4yDy5Qcm90b1RyYWRlU2lkZRISCgpzeW1ib2xOYW1lGAUgAigJEg4KBnZv",
              "bHVtZRgGIAIoAxISCgplbnRyeVByaWNlGAcgAigBEgwKBHN3YXAYCCABKAMS",
              "EgoKY29tbWlzc2lvbhgJIAEoAxIVCg1vcGVuVGltZXN0YW1wGAogAigDEhYK",
              "DmNsb3NlVGltZXN0YW1wGAsgASgDEhUKDXN0b3BMb3NzUHJpY2UYDCABKAES",
              "FwoPdGFrZVByb2ZpdFByaWNlGA0gASgBEg8KB2NoYW5uZWwYDiABKAkSDwoH",
              "Y29tbWVudBgPIAEoCSKOAgobUHJvdG9PQUNsb3NlUG9zaXRpb25EZXRhaWxz",
              "EhIKCmVudHJ5UHJpY2UYASACKAESDgoGcHJvZml0GAIgAigDEgwKBHN3YXAY",
              "AyACKAMSEgoKY29tbWlzc2lvbhgEIAIoAxIPCgdiYWxhbmNlGAUgAigDEg8K",
              "B2NvbW1lbnQYBiABKAkSFQoNc3RvcExvc3NQcmljZRgHIAEoARIXCg90YWtl",
              "UHJvZml0UHJpY2UYCCABKAESJAoccXVvdGVUb0RlcG9zaXRDb252ZXJzaW9u",
              "UmF0ZRgJIAEoARIUCgxjbG9zZWRWb2x1bWUYCiACKAMSGwoPY2xvc2VkQnlT",
              "dG9wT3V0GAsgASgIQgIYASKWAQoXUHJvdG9PQVNwb3RTdWJzY3JpcHRpb24S",
              "EQoJYWNjb3VudElkGAEgAigDEhYKDnN1YnNjcmlwdGlvbklkGAIgAigNEhcK",
              "C3N5bWJvbE5hbWVzGAMgAygJQgIYARI3ChFzdWJzY3JpYmVkU3ltYm9scxgE",
              "IAMoCzIcLlByb3RvT0FTdWJzY3JpYmVkU3BvdFN5bWJvbCJZChtQcm90b09B",
              "U3Vic2NyaWJlZFNwb3RTeW1ib2wSEgoKc3ltYm9sTmFtZRgBIAIoCRImCgZw",
              "ZXJpb2QYAiADKA4yFi5Qcm90b09BVHJlbmRiYXJQZXJpb2QimwEKD1Byb3Rv",
              "T0FUcmVuZGJhchIMCgRvcGVuGAEgASgBEg0KBWNsb3NlGAIgASgBEgwKBGhp",
              "Z2gYAyABKAESCwoDbG93GAQgASgBEg4KBnZvbHVtZRgFIAIoAxIUCgx1dGNU",
              "aW1lc3RhbXAYBiABKAMSKgoGcGVyaW9kGAcgASgOMhYuUHJvdG9PQVRyZW5k",
              "YmFyUGVyaW9kOgJNMSqsBgoSUHJvdG9PQVBheWxvYWRUeXBlEhAKC09BX0FV",
              "VEhfUkVRENAPEhAKC09BX0FVVEhfUkVTENEPEigKI09BX1NVQlNDUklCRV9G",
              "T1JfVFJBRElOR19FVkVOVFNfUkVRENIPEigKI09BX1NVQlNDUklCRV9GT1Jf",
              "VFJBRElOR19FVkVOVFNfUkVTENMPEisKJk9BX1VOU1VCU0NSSUJFX0ZST01f",
              "VFJBRElOR19FVkVOVFNfUkVRENQPEisKJk9BX1VOU1VCU0NSSUJFX0ZST01f",
              "VFJBRElOR19FVkVOVFNfUkVTENUPEiMKHk9BX0dFVF9TVUJTQ1JJQkVEX0FD",
              "Q09VTlRTX1JFURDWDxIjCh5PQV9HRVRfU1VCU0NSSUJFRF9BQ0NPVU5UU19S",
              "RVMQ1w8SGAoTT0FfQ1JFQVRFX09SREVSX1JFURDdDxIXChJPQV9FWEVDVVRJ",
              "T05fRVZFTlQQ4A8SGAoTT0FfQ0FOQ0VMX09SREVSX1JFURDhDxIaChVPQV9D",
              "TE9TRV9QT1NJVElPTl9SRVEQ4g8SIAobT0FfQU1FTkRfUE9TSVRJT05fU0xf",
              "VFBfUkVREOMPEhcKEk9BX0FNRU5EX09SREVSX1JFURDkDxIfChpPQV9TVUJT",
              "Q1JJQkVfRk9SX1NQT1RTX1JFURDlDxIfChpPQV9TVUJTQ1JJQkVfRk9SX1NQ",
              "T1RTX1JFUxDmDxIiCh1PQV9VTlNVQlNDUklCRV9GUk9NX1NQT1RTX1JFURDn",
              "DxIiCh1PQV9VTlNVQlNDUklCRV9GUk9NX1NQT1RTX1JFUxDoDxIhChxPQV9H",
              "RVRfU1BPVF9TVUJTQ1JJUFRJT05fUkVREOkPEiEKHE9BX0dFVF9TUE9UX1NV",
              "QlNDUklQVElPTl9SRVMQ6g8SJgohT0FfR0VUX0FMTF9TUE9UX1NVQlNDUklQ",
              "VElPTlNfUkVREOsPEiYKIU9BX0dFVF9BTExfU1BPVF9TVUJTQ1JJUFRJT05T",
              "X1JFUxDsDxISCg1PQV9TUE9UX0VWRU5UEO0PEhAKC09BX1BJTkdfUkVREO4P",
              "EhAKC09BX1BJTkdfUkVTEO8PKncKEFByb3RvT0FPcmRlclR5cGUSDQoJT0Ff",
              "TUFSS0VUEAESDAoIT0FfTElNSVQQAhILCgdPQV9TVE9QEAMSEQoNT0FfUFJP",
              "VEVDVElPThAEEhMKD09BX01BUktFVF9SQU5HRRAFEhEKDU9BX1NUT1BfTElN",
              "SVQQBiq7AQoUUHJvdG9PQUV4ZWN1dGlvblR5cGUSFQoRT0FfT1JERVJfQUND",
              "RVBURUQQARITCg9PQV9PUkRFUl9GSUxMRUQQAhIWChJPQV9PUkRFUl9DQU5D",
              "RUxMRUQQAxIUChBPQV9PUkRFUl9FWFBJUkVEEAQSFAoQT0FfT1JERVJfQU1F",
              "TkRFRBAFEhUKEU9BX09SREVSX1JFSkVDVEVEEAYSHAoYT0FfT1JERVJfQ0FO",
              "Q0VMX1JFSkVDVEVEEAcqkQEKFVByb3RvT0FQb3NpdGlvblN0YXR1cxIbChdP",
              "QV9QT1NJVElPTl9TVEFUVVNfT1BFThABEh0KGU9BX1BPU0lUSU9OX1NUQVRV",
              "U19DTE9TRUQQAhIeChpPQV9QT1NJVElPTl9TVEFUVVNfQ1JFQVRFRBADEhwK",
              "GE9BX1BPU0lUSU9OX1NUQVRVU19FUlJPUhAEKowBChVQcm90b09BVHJlbmRi",
              "YXJQZXJpb2QSBgoCTTEQARIGCgJNMhACEgYKAk0zEAMSBgoCTTQQBBIGCgJN",
              "NRAFEgcKA00xMBAGEgcKA00xNRAHEgcKA00zMBAIEgYKAkgxEAkSBgoCSDQQ",
              "ChIHCgNIMTIQCxIGCgJEMRAMEgYKAlcxEA0SBwoDTU4xEA4qIwoOUHJvdG9U",
              "cmFkZVNpZGUSBwoDQlVZEAESCAoEU0VMTBACKiIKDlByb3RvUXVvdGVUeXBl",
              "EgcKA0JJRBABEgcKA0FTSxACKnsKEFByb3RvVGltZUluRm9yY2USEgoOR09P",
              "RF9USUxMX0RBVEUQARIUChBHT09EX1RJTExfQ0FOQ0VMEAISFwoTSU1NRURJ",
              "QVRFX09SX0NBTkNFTBADEhAKDEZJTExfT1JfS0lMTBAEEhIKDk1BUktFVF9P",
              "Tl9PUEVOEAVCTgooY29tLnh0cmFkZXIucHJvdG9jb2wucHJvdG8ub3BlbmFw",
            "aS5tb2RlbEIdQ29udGFpbmVyT3BlbkFwaU1vZGVsTWVzc2FnZXNQAaABAQ=="));
        pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate (pbd::FileDescriptor root) {
            descriptor = root;
            internal__static_ProtoOAPartnerDetails__Descriptor = Descriptor.MessageTypes[0];
            internal__static_ProtoOAPartnerDetails__FieldAccessorTable =
                new pb::FieldAccess.FieldAccessorTable<global::ProtoOAPartnerDetails, global::ProtoOAPartnerDetails.Builder>(internal__static_ProtoOAPartnerDetails__Descriptor,
                    new string[] { "PartnerName", });
            internal__static_ProtoOAOrder__Descriptor = Descriptor.MessageTypes[1];
            internal__static_ProtoOAOrder__FieldAccessorTable =
                new pb::FieldAccess.FieldAccessorTable<global::ProtoOAOrder, global::ProtoOAOrder.Builder>(internal__static_ProtoOAOrder__Descriptor,
                    new string[] { "OrderId", "AccountId", "OrderType", "TradeSide", "SymbolName", "ClosingOrder", "RequestedVolume", "ExecutedVolume", "ExecutionPrice", "LimitPrice", "StopPrice", "StopLossPrice", "TakeProfitPrice", "BaseSlippagePrice", "SlippageInPips", "RelativeStopLossInPips", "RelativeTakeProfitInPips", "Commission", "OpenTimestamp", "CloseTimestamp", "ExpirationTimestamp", "Channel", "Comment", "ClosePositionDetails", "ClientOrderId", "StopOut", "SlippageInPoints", });
            internal__static_ProtoOAPosition__Descriptor = Descriptor.MessageTypes[2];
            internal__static_ProtoOAPosition__FieldAccessorTable =
                new pb::FieldAccess.FieldAccessorTable<global::ProtoOAPosition, global::ProtoOAPosition.Builder>(internal__static_ProtoOAPosition__Descriptor,
                    new string[] { "PositionId", "AccountId", "PositionStatus", "TradeSide", "SymbolName", "Volume", "EntryPrice", "Swap", "Commission", "OpenTimestamp", "CloseTimestamp", "StopLossPrice", "TakeProfitPrice", "Channel", "Comment", });
            internal__static_ProtoOAClosePositionDetails__Descriptor = Descriptor.MessageTypes[3];
            internal__static_ProtoOAClosePositionDetails__FieldAccessorTable =
                new pb::FieldAccess.FieldAccessorTable<global::ProtoOAClosePositionDetails, global::ProtoOAClosePositionDetails.Builder>(internal__static_ProtoOAClosePositionDetails__Descriptor,
                    new string[] { "EntryPrice", "Profit", "Swap", "Commission", "Balance", "Comment", "StopLossPrice", "TakeProfitPrice", "QuoteToDepositConversionRate", "ClosedVolume", "ClosedByStopOut", });
            internal__static_ProtoOASpotSubscription__Descriptor = Descriptor.MessageTypes[4];
            internal__static_ProtoOASpotSubscription__FieldAccessorTable =
                new pb::FieldAccess.FieldAccessorTable<global::ProtoOASpotSubscription, global::ProtoOASpotSubscription.Builder>(internal__static_ProtoOASpotSubscription__Descriptor,
                    new string[] { "AccountId", "SubscriptionId", "SymbolNames", "SubscribedSymbols", });
            internal__static_ProtoOASubscribedSpotSymbol__Descriptor = Descriptor.MessageTypes[5];
            internal__static_ProtoOASubscribedSpotSymbol__FieldAccessorTable =
                new pb::FieldAccess.FieldAccessorTable<global::ProtoOASubscribedSpotSymbol, global::ProtoOASubscribedSpotSymbol.Builder>(internal__static_ProtoOASubscribedSpotSymbol__Descriptor,
                    new string[] { "SymbolName", "Period", });
            internal__static_ProtoOATrendbar__Descriptor = Descriptor.MessageTypes[6];
            internal__static_ProtoOATrendbar__FieldAccessorTable =
                new pb::FieldAccess.FieldAccessorTable<global::ProtoOATrendbar, global::ProtoOATrendbar.Builder>(internal__static_ProtoOATrendbar__Descriptor,
                    new string[] { "Open", "Close", "High", "Low", "Volume", "UtcTimestamp", "Period", });
            return null;
        };
        pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
            new pbd::FileDescriptor[] {
            }, assigner);
    }
    #endregion

}
#region Enums
public enum ProtoOAPayloadType
{
    OA_AUTH_REQ = 2000,
    OA_AUTH_RES = 2001,
    OA_SUBSCRIBE_FOR_TRADING_EVENTS_REQ = 2002,
    OA_SUBSCRIBE_FOR_TRADING_EVENTS_RES = 2003,
    OA_UNSUBSCRIBE_FROM_TRADING_EVENTS_REQ = 2004,
    OA_UNSUBSCRIBE_FROM_TRADING_EVENTS_RES = 2005,
    OA_GET_SUBSCRIBED_ACCOUNTS_REQ = 2006,
    OA_GET_SUBSCRIBED_ACCOUNTS_RES = 2007,
    OA_CREATE_ORDER_REQ = 2013,
    OA_EXECUTION_EVENT = 2016,
    OA_CANCEL_ORDER_REQ = 2017,
    OA_CLOSE_POSITION_REQ = 2018,
    OA_AMEND_POSITION_SL_TP_REQ = 2019,
    OA_AMEND_ORDER_REQ = 2020,
    OA_SUBSCRIBE_FOR_SPOTS_REQ = 2021,
    OA_SUBSCRIBE_FOR_SPOTS_RES = 2022,
    OA_UNSUBSCRIBE_FROM_SPOTS_REQ = 2023,
    OA_UNSUBSCRIBE_FROM_SPOTS_RES = 2024,
    OA_GET_SPOT_SUBSCRIPTION_REQ = 2025,
    OA_GET_SPOT_SUBSCRIPTION_RES = 2026,
    OA_GET_ALL_SPOT_SUBSCRIPTIONS_REQ = 2027,
    OA_GET_ALL_SPOT_SUBSCRIPTIONS_RES = 2028,
    OA_SPOT_EVENT = 2029,
    OA_PING_REQ = 2030,
    OA_PING_RES = 2031,
}

public enum ProtoOAOrderType
{
    OA_MARKET = 1,
    OA_LIMIT = 2,
    OA_STOP = 3,
    OA_PROTECTION = 4,
    OA_MARKET_RANGE = 5,
    OA_STOP_LIMIT = 6,
}

public enum ProtoOAExecutionType
{
    OA_ORDER_ACCEPTED = 1,
    OA_ORDER_FILLED = 2,
    OA_ORDER_CANCELLED = 3,
    OA_ORDER_EXPIRED = 4,
    OA_ORDER_AMENDED = 5,
    OA_ORDER_REJECTED = 6,
    OA_ORDER_CANCEL_REJECTED = 7,
}

public enum ProtoOAPositionStatus
{
    OA_POSITION_STATUS_OPEN = 1,
    OA_POSITION_STATUS_CLOSED = 2,
    OA_POSITION_STATUS_CREATED = 3,
    OA_POSITION_STATUS_ERROR = 4,
}

public enum ProtoOATrendbarPeriod
{
    M1 = 1,
    M2 = 2,
    M3 = 3,
    M4 = 4,
    M5 = 5,
    M10 = 6,
    M15 = 7,
    M30 = 8,
    H1 = 9,
    H4 = 10,
    H12 = 11,
    D1 = 12,
    W1 = 13,
    MN1 = 14,
}

public enum ProtoTradeSide
{
    BUY = 1,
    SELL = 2,
}

public enum ProtoQuoteType
{
    BID = 1,
    ASK = 2,
}

public enum ProtoTimeInForce
{
    GOOD_TILL_DATE = 1,
    GOOD_TILL_CANCEL = 2,
    IMMEDIATE_OR_CANCEL = 3,
    FILL_OR_KILL = 4,
    MARKET_ON_OPEN = 5,
}

#endregion

#region Messages
[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class ProtoOAPartnerDetails : pb::GeneratedMessage<ProtoOAPartnerDetails, ProtoOAPartnerDetails.Builder>
{
    private ProtoOAPartnerDetails() { }
    private static readonly ProtoOAPartnerDetails defaultInstance = new ProtoOAPartnerDetails().MakeReadOnly();
    private static readonly string[] _protoOAPartnerDetailsFieldNames = new string[] { "partnerName" };
    private static readonly uint[] _protoOAPartnerDetailsFieldTags = new uint[] { 10 };
    public static ProtoOAPartnerDetails DefaultInstance
    {
        get { return defaultInstance; }
    }

    public override ProtoOAPartnerDetails DefaultInstanceForType
    {
        get { return DefaultInstance; }
    }

    protected override ProtoOAPartnerDetails ThisMessage
    {
        get { return this; }
    }

    public static pbd::MessageDescriptor Descriptor
    {
        get { return global::OpenApiModelMessages.internal__static_ProtoOAPartnerDetails__Descriptor; }
    }

    protected override pb::FieldAccess.FieldAccessorTable<ProtoOAPartnerDetails, ProtoOAPartnerDetails.Builder> InternalFieldAccessors
    {
        get { return global::OpenApiModelMessages.internal__static_ProtoOAPartnerDetails__FieldAccessorTable; }
    }

    public const int PartnerNameFieldNumber = 1;
    private bool hasPartnerName;
    private string partnerName_ = "";
    public bool HasPartnerName
    {
        get { return hasPartnerName; }
    }
    public string PartnerName
    {
        get { return partnerName_; }
    }

    public override bool IsInitialized
    {
        get
        {
            if (!hasPartnerName) return false;
            return true;
        }
    }

    public override void WriteTo(pb::ICodedOutputStream output)
    {
        CalcSerializedSize();
        string[] field_names = _protoOAPartnerDetailsFieldNames;
        if (hasPartnerName)
        {
            output.WriteString(1, field_names[0], PartnerName);
        }
        UnknownFields.WriteTo(output);
    }

    private int memoizedSerializedSize = -1;
    public override int SerializedSize
    {
        get
        {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            return CalcSerializedSize();
        }
    }

    private int CalcSerializedSize()
    {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (hasPartnerName)
        {
            size += pb::CodedOutputStream.ComputeStringSize(1, PartnerName);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
    }
    public static ProtoOAPartnerDetails ParseFrom(pb::ByteString data)
    {
        return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ProtoOAPartnerDetails ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry)
    {
        return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ProtoOAPartnerDetails ParseFrom(byte[] data)
    {
        return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ProtoOAPartnerDetails ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry)
    {
        return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ProtoOAPartnerDetails ParseFrom(global::System.IO.Stream input)
    {
        return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ProtoOAPartnerDetails ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
    {
        return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ProtoOAPartnerDetails ParseDelimitedFrom(global::System.IO.Stream input)
    {
        return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ProtoOAPartnerDetails ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
    {
        return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ProtoOAPartnerDetails ParseFrom(pb::ICodedInputStream input)
    {
        return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ProtoOAPartnerDetails ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
    {
        return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ProtoOAPartnerDetails MakeReadOnly()
    {
        return this;
    }

    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ProtoOAPartnerDetails prototype)
    {
        return new Builder(prototype);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<ProtoOAPartnerDetails, Builder>
    {
        protected override Builder ThisBuilder
        {
            get { return this; }
        }
        public Builder()
        {
            result = DefaultInstance;
            resultIsReadOnly = true;
        }
        internal Builder(ProtoOAPartnerDetails cloneFrom)
        {
            result = cloneFrom;
            resultIsReadOnly = true;
        }

        private bool resultIsReadOnly;
        private ProtoOAPartnerDetails result;

        private ProtoOAPartnerDetails PrepareBuilder()
        {
            if (resultIsReadOnly)
            {
                ProtoOAPartnerDetails original = result;
                result = new ProtoOAPartnerDetails();
                resultIsReadOnly = false;
                MergeFrom(original);
            }
            return result;
        }

        public override bool IsInitialized
        {
            get { return result.IsInitialized; }
        }

        protected override ProtoOAPartnerDetails MessageBeingBuilt
        {
            get { return PrepareBuilder(); }
        }

        public override Builder Clear()
        {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
        }

        public override Builder Clone()
        {
            if (resultIsReadOnly)
            {
                return new Builder(result);
            }
            else
            {
                return new Builder().MergeFrom(result);
            }
        }

        public override pbd::MessageDescriptor DescriptorForType
        {
            get { return global::ProtoOAPartnerDetails.Descriptor; }
        }

        public override ProtoOAPartnerDetails DefaultInstanceForType
        {
            get { return global::ProtoOAPartnerDetails.DefaultInstance; }
        }

        public override ProtoOAPartnerDetails BuildPartial()
        {
            if (resultIsReadOnly)
            {
                return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
        }

        public override Builder MergeFrom(pb::IMessage other)
        {
            if (other is ProtoOAPartnerDetails)
            {
                return MergeFrom((ProtoOAPartnerDetails)other);
            }
            else
            {
                base.MergeFrom(other);
                return this;
            }
        }

        public override Builder MergeFrom(ProtoOAPartnerDetails other)
        {
            if (other == global::ProtoOAPartnerDetails.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasPartnerName)
            {
                PartnerName = other.PartnerName;
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
        }

        public override Builder MergeFrom(pb::ICodedInputStream input)
        {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
        }

        public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
        {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name))
            {
                if (tag == 0 && field_name != null)
                {
                    int field_ordinal = global::System.Array.BinarySearch(_protoOAPartnerDetailsFieldNames, field_name, global::System.StringComparer.Ordinal);
                    if (field_ordinal >= 0)
                        tag = _protoOAPartnerDetailsFieldTags[field_ordinal];
                    else
                    {
                        if (unknownFields == null)
                        {
                            unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                        }
                        ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                        continue;
                    }
                }
                switch (tag)
                {
                    case 0:
                        {
                            throw pb::InvalidProtocolBufferException.InvalidTag();
                        }
                    default:
                        {
                            if (pb::WireFormat.IsEndGroupTag(tag))
                            {
                                if (unknownFields != null)
                                {
                                    this.UnknownFields = unknownFields.Build();
                                }
                                return this;
                            }
                            if (unknownFields == null)
                            {
                                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                            }
                            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                            break;
                        }
                    case 10:
                        {
                            result.hasPartnerName = input.ReadString(ref result.partnerName_);
                            break;
                        }
                }
            }

            if (unknownFields != null)
            {
                this.UnknownFields = unknownFields.Build();
            }
            return this;
        }


        public bool HasPartnerName
        {
            get { return result.hasPartnerName; }
        }
        public string PartnerName
        {
            get { return result.PartnerName; }
            set { SetPartnerName(value); }
        }
        public Builder SetPartnerName(string value)
        {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasPartnerName = true;
            result.partnerName_ = value;
            return this;
        }
        public Builder ClearPartnerName()
        {
            PrepareBuilder();
            result.hasPartnerName = false;
            result.partnerName_ = "";
            return this;
        }
    }
    static ProtoOAPartnerDetails()
    {
        object.ReferenceEquals(global::OpenApiModelMessages.Descriptor, null);
    }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class ProtoOAOrder : pb::GeneratedMessage<ProtoOAOrder, ProtoOAOrder.Builder>
{
    private ProtoOAOrder() { }
    private static readonly ProtoOAOrder defaultInstance = new ProtoOAOrder().MakeReadOnly();
    private static readonly string[] _protoOAOrderFieldNames = new string[] { "accountId", "baseSlippagePrice", "channel", "clientOrderId", "closePositionDetails", "closeTimestamp", "closingOrder", "comment", "commission", "executedVolume", "executionPrice", "expirationTimestamp", "limitPrice", "openTimestamp", "orderId", "orderType", "relativeStopLossInPips", "relativeTakeProfitInPips", "requestedVolume", "slippageInPips", "slippageInPoints", "stopLossPrice", "stopOut", "stopPrice", "symbolName", "takeProfitPrice", "tradeSide" };
    private static readonly uint[] _protoOAOrderFieldTags = new uint[] { 16, 113, 178, 202, 194, 160, 48, 186, 144, 64, 73, 168, 81, 152, 8, 24, 128, 136, 56, 120, 248, 97, 208, 89, 42, 105, 32 };
    public static ProtoOAOrder DefaultInstance
    {
        get { return defaultInstance; }
    }

    public override ProtoOAOrder DefaultInstanceForType
    {
        get { return DefaultInstance; }
    }

    protected override ProtoOAOrder ThisMessage
    {
        get { return this; }
    }

    public static pbd::MessageDescriptor Descriptor
    {
        get { return global::OpenApiModelMessages.internal__static_ProtoOAOrder__Descriptor; }
    }

    protected override pb::FieldAccess.FieldAccessorTable<ProtoOAOrder, ProtoOAOrder.Builder> InternalFieldAccessors
    {
        get { return global::OpenApiModelMessages.internal__static_ProtoOAOrder__FieldAccessorTable; }
    }

    public const int OrderIdFieldNumber = 1;
    private bool hasOrderId;
    private long orderId_;
    public bool HasOrderId
    {
        get { return hasOrderId; }
    }
    public long OrderId
    {
        get { return orderId_; }
    }

    public const int AccountIdFieldNumber = 2;
    private bool hasAccountId;
    private long accountId_;
    public bool HasAccountId
    {
        get { return hasAccountId; }
    }
    public long AccountId
    {
        get { return accountId_; }
    }

    public const int OrderTypeFieldNumber = 3;
    private bool hasOrderType;
    private global::ProtoOAOrderType orderType_ = global::ProtoOAOrderType.OA_MARKET;
    public bool HasOrderType
    {
        get { return hasOrderType; }
    }
    public global::ProtoOAOrderType OrderType
    {
        get { return orderType_; }
    }

    public const int TradeSideFieldNumber = 4;
    private bool hasTradeSide;
    private global::ProtoTradeSide tradeSide_ = global::ProtoTradeSide.BUY;
    public bool HasTradeSide
    {
        get { return hasTradeSide; }
    }
    public global::ProtoTradeSide TradeSide
    {
        get { return tradeSide_; }
    }

    public const int SymbolNameFieldNumber = 5;
    private bool hasSymbolName;
    private string symbolName_ = "";
    public bool HasSymbolName
    {
        get { return hasSymbolName; }
    }
    public string SymbolName
    {
        get { return symbolName_; }
    }

    public const int ClosingOrderFieldNumber = 6;
    private bool hasClosingOrder;
    private bool closingOrder_;
    public bool HasClosingOrder
    {
        get { return hasClosingOrder; }
    }
    public bool ClosingOrder
    {
        get { return closingOrder_; }
    }

    public const int RequestedVolumeFieldNumber = 7;
    private bool hasRequestedVolume;
    private long requestedVolume_;
    public bool HasRequestedVolume
    {
        get { return hasRequestedVolume; }
    }
    public long RequestedVolume
    {
        get { return requestedVolume_; }
    }

    public const int ExecutedVolumeFieldNumber = 8;
    private bool hasExecutedVolume;
    private long executedVolume_;
    public bool HasExecutedVolume
    {
        get { return hasExecutedVolume; }
    }
    public long ExecutedVolume
    {
        get { return executedVolume_; }
    }

    public const int ExecutionPriceFieldNumber = 9;
    private bool hasExecutionPrice;
    private double executionPrice_;
    public bool HasExecutionPrice
    {
        get { return hasExecutionPrice; }
    }
    public double ExecutionPrice
    {
        get { return executionPrice_; }
    }

    public const int LimitPriceFieldNumber = 10;
    private bool hasLimitPrice;
    private double limitPrice_;
    public bool HasLimitPrice
    {
        get { return hasLimitPrice; }
    }
    public double LimitPrice
    {
        get { return limitPrice_; }
    }

    public const int StopPriceFieldNumber = 11;
    private bool hasStopPrice;
    private double stopPrice_;
    public bool HasStopPrice
    {
        get { return hasStopPrice; }
    }
    public double StopPrice
    {
        get { return stopPrice_; }
    }

    public const int StopLossPriceFieldNumber = 12;
    private bool hasStopLossPrice;
    private double stopLossPrice_;
    public bool HasStopLossPrice
    {
        get { return hasStopLossPrice; }
    }
    public double StopLossPrice
    {
        get { return stopLossPrice_; }
    }

    public const int TakeProfitPriceFieldNumber = 13;
    private bool hasTakeProfitPrice;
    private double takeProfitPrice_;
    public bool HasTakeProfitPrice
    {
        get { return hasTakeProfitPrice; }
    }
    public double TakeProfitPrice
    {
        get { return takeProfitPrice_; }
    }

    public const int BaseSlippagePriceFieldNumber = 14;
    private bool hasBaseSlippagePrice;
    private double baseSlippagePrice_;
    public bool HasBaseSlippagePrice
    {
        get { return hasBaseSlippagePrice; }
    }
    public double BaseSlippagePrice
    {
        get { return baseSlippagePrice_; }
    }

    public const int SlippageInPipsFieldNumber = 15;
    private bool hasSlippageInPips;
    private long slippageInPips_;
    public bool HasSlippageInPips
    {
        get { return hasSlippageInPips; }
    }
    public long SlippageInPips
    {
        get { return slippageInPips_; }
    }

    public const int RelativeStopLossInPipsFieldNumber = 16;
    private bool hasRelativeStopLossInPips;
    private int relativeStopLossInPips_;
    public bool HasRelativeStopLossInPips
    {
        get { return hasRelativeStopLossInPips; }
    }
    public int RelativeStopLossInPips
    {
        get { return relativeStopLossInPips_; }
    }

    public const int RelativeTakeProfitInPipsFieldNumber = 17;
    private bool hasRelativeTakeProfitInPips;
    private int relativeTakeProfitInPips_;
    public bool HasRelativeTakeProfitInPips
    {
        get { return hasRelativeTakeProfitInPips; }
    }
    public int RelativeTakeProfitInPips
    {
        get { return relativeTakeProfitInPips_; }
    }

    public const int CommissionFieldNumber = 18;
    private bool hasCommission;
    private long commission_;
    public bool HasCommission
    {
        get { return hasCommission; }
    }
    public long Commission
    {
        get { return commission_; }
    }

    public const int OpenTimestampFieldNumber = 19;
    private bool hasOpenTimestamp;
    private long openTimestamp_;
    public bool HasOpenTimestamp
    {
        get { return hasOpenTimestamp; }
    }
    public long OpenTimestamp
    {
        get { return openTimestamp_; }
    }

    public const int CloseTimestampFieldNumber = 20;
    private bool hasCloseTimestamp;
    private long closeTimestamp_;
    public bool HasCloseTimestamp
    {
        get { return hasCloseTimestamp; }
    }
    public long CloseTimestamp
    {
        get { return closeTimestamp_; }
    }

    public const int ExpirationTimestampFieldNumber = 21;
    private bool hasExpirationTimestamp;
    private long expirationTimestamp_;
    public bool HasExpirationTimestamp
    {
        get { return hasExpirationTimestamp; }
    }
    public long ExpirationTimestamp
    {
        get { return expirationTimestamp_; }
    }

    public const int ChannelFieldNumber = 22;
    private bool hasChannel;
    private string channel_ = "";
    public bool HasChannel
    {
        get { return hasChannel; }
    }
    public string Channel
    {
        get { return channel_; }
    }

    public const int CommentFieldNumber = 23;
    private bool hasComment;
    private string comment_ = "";
    public bool HasComment
    {
        get { return hasComment; }
    }
    public string Comment
    {
        get { return comment_; }
    }

    public const int ClosePositionDetailsFieldNumber = 24;
    private bool hasClosePositionDetails;
    private global::ProtoOAClosePositionDetails closePositionDetails_;
    public bool HasClosePositionDetails
    {
        get { return hasClosePositionDetails; }
    }
    public global::ProtoOAClosePositionDetails ClosePositionDetails
    {
        get { return closePositionDetails_ ?? global::ProtoOAClosePositionDetails.DefaultInstance; }
    }

    public const int ClientOrderIdFieldNumber = 25;
    private bool hasClientOrderId;
    private string clientOrderId_ = "";
    public bool HasClientOrderId
    {
        get { return hasClientOrderId; }
    }
    public string ClientOrderId
    {
        get { return clientOrderId_; }
    }

    public const int StopOutFieldNumber = 26;
    private bool hasStopOut;
    private bool stopOut_;
    public bool HasStopOut
    {
        get { return hasStopOut; }
    }
    public bool StopOut
    {
        get { return stopOut_; }
    }

    public const int SlippageInPointsFieldNumber = 31;
    private bool hasSlippageInPoints;
    private int slippageInPoints_;
    public bool HasSlippageInPoints
    {
        get { return hasSlippageInPoints; }
    }
    public int SlippageInPoints
    {
        get { return slippageInPoints_; }
    }

    public override bool IsInitialized
    {
        get
        {
            if (!hasOrderId) return false;
            if (!hasAccountId) return false;
            if (!hasOrderType) return false;
            if (!hasTradeSide) return false;
            if (!hasSymbolName) return false;
            if (!hasClosingOrder) return false;
            if (!hasRequestedVolume) return false;
            if (HasClosePositionDetails)
            {
                if (!ClosePositionDetails.IsInitialized) return false;
            }
            return true;
        }
    }

    public override void WriteTo(pb::ICodedOutputStream output)
    {
        CalcSerializedSize();
        string[] field_names = _protoOAOrderFieldNames;
        if (hasOrderId)
        {
            output.WriteInt64(1, field_names[14], OrderId);
        }
        if (hasAccountId)
        {
            output.WriteInt64(2, field_names[0], AccountId);
        }
        if (hasOrderType)
        {
            output.WriteEnum(3, field_names[15], (int)OrderType, OrderType);
        }
        if (hasTradeSide)
        {
            output.WriteEnum(4, field_names[26], (int)TradeSide, TradeSide);
        }
        if (hasSymbolName)
        {
            output.WriteString(5, field_names[24], SymbolName);
        }
        if (hasClosingOrder)
        {
            output.WriteBool(6, field_names[6], ClosingOrder);
        }
        if (hasRequestedVolume)
        {
            output.WriteInt64(7, field_names[18], RequestedVolume);
        }
        if (hasExecutedVolume)
        {
            output.WriteInt64(8, field_names[9], ExecutedVolume);
        }
        if (hasExecutionPrice)
        {
            output.WriteDouble(9, field_names[10], ExecutionPrice);
        }
        if (hasLimitPrice)
        {
            output.WriteDouble(10, field_names[12], LimitPrice);
        }
        if (hasStopPrice)
        {
            output.WriteDouble(11, field_names[23], StopPrice);
        }
        if (hasStopLossPrice)
        {
            output.WriteDouble(12, field_names[21], StopLossPrice);
        }
        if (hasTakeProfitPrice)
        {
            output.WriteDouble(13, field_names[25], TakeProfitPrice);
        }
        if (hasBaseSlippagePrice)
        {
            output.WriteDouble(14, field_names[1], BaseSlippagePrice);
        }
        if (hasSlippageInPips)
        {
            output.WriteInt64(15, field_names[19], SlippageInPips);
        }
        if (hasRelativeStopLossInPips)
        {
            output.WriteInt32(16, field_names[16], RelativeStopLossInPips);
        }
        if (hasRelativeTakeProfitInPips)
        {
            output.WriteInt32(17, field_names[17], RelativeTakeProfitInPips);
        }
        if (hasCommission)
        {
            output.WriteInt64(18, field_names[8], Commission);
        }
        if (hasOpenTimestamp)
        {
            output.WriteInt64(19, field_names[13], OpenTimestamp);
        }
        if (hasCloseTimestamp)
        {
            output.WriteInt64(20, field_names[5], CloseTimestamp);
        }
        if (hasExpirationTimestamp)
        {
            output.WriteInt64(21, field_names[11], ExpirationTimestamp);
        }
        if (hasChannel)
        {
            output.WriteString(22, field_names[2], Channel);
        }
        if (hasComment)
        {
            output.WriteString(23, field_names[7], Comment);
        }
        if (hasClosePositionDetails)
        {
            output.WriteMessage(24, field_names[4], ClosePositionDetails);
        }
        if (hasClientOrderId)
        {
            output.WriteString(25, field_names[3], ClientOrderId);
        }
        if (hasStopOut)
        {
            output.WriteBool(26, field_names[22], StopOut);
        }
        if (hasSlippageInPoints)
        {
            output.WriteInt32(31, field_names[20], SlippageInPoints);
        }
        UnknownFields.WriteTo(output);
    }

    private int memoizedSerializedSize = -1;
    public override int SerializedSize
    {
        get
        {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            return CalcSerializedSize();
        }
    }

    private int CalcSerializedSize()
    {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (hasOrderId)
        {
            size += pb::CodedOutputStream.ComputeInt64Size(1, OrderId);
        }
        if (hasAccountId)
        {
            size += pb::CodedOutputStream.ComputeInt64Size(2, AccountId);
        }
        if (hasOrderType)
        {
            size += pb::CodedOutputStream.ComputeEnumSize(3, (int)OrderType);
        }
        if (hasTradeSide)
        {
            size += pb::CodedOutputStream.ComputeEnumSize(4, (int)TradeSide);
        }
        if (hasSymbolName)
        {
            size += pb::CodedOutputStream.ComputeStringSize(5, SymbolName);
        }
        if (hasClosingOrder)
        {
            size += pb::CodedOutputStream.ComputeBoolSize(6, ClosingOrder);
        }
        if (hasRequestedVolume)
        {
            size += pb::CodedOutputStream.ComputeInt64Size(7, RequestedVolume);
        }
        if (hasExecutedVolume)
        {
            size += pb::CodedOutputStream.ComputeInt64Size(8, ExecutedVolume);
        }
        if (hasExecutionPrice)
        {
            size += pb::CodedOutputStream.ComputeDoubleSize(9, ExecutionPrice);
        }
        if (hasLimitPrice)
        {
            size += pb::CodedOutputStream.ComputeDoubleSize(10, LimitPrice);
        }
        if (hasStopPrice)
        {
            size += pb::CodedOutputStream.ComputeDoubleSize(11, StopPrice);
        }
        if (hasStopLossPrice)
        {
            size += pb::CodedOutputStream.ComputeDoubleSize(12, StopLossPrice);
        }
        if (hasTakeProfitPrice)
        {
            size += pb::CodedOutputStream.ComputeDoubleSize(13, TakeProfitPrice);
        }
        if (hasBaseSlippagePrice)
        {
            size += pb::CodedOutputStream.ComputeDoubleSize(14, BaseSlippagePrice);
        }
        if (hasSlippageInPips)
        {
            size += pb::CodedOutputStream.ComputeInt64Size(15, SlippageInPips);
        }
        if (hasRelativeStopLossInPips)
        {
            size += pb::CodedOutputStream.ComputeInt32Size(16, RelativeStopLossInPips);
        }
        if (hasRelativeTakeProfitInPips)
        {
            size += pb::CodedOutputStream.ComputeInt32Size(17, RelativeTakeProfitInPips);
        }
        if (hasCommission)
        {
            size += pb::CodedOutputStream.ComputeInt64Size(18, Commission);
        }
        if (hasOpenTimestamp)
        {
            size += pb::CodedOutputStream.ComputeInt64Size(19, OpenTimestamp);
        }
        if (hasCloseTimestamp)
        {
            size += pb::CodedOutputStream.ComputeInt64Size(20, CloseTimestamp);
        }
        if (hasExpirationTimestamp)
        {
            size += pb::CodedOutputStream.ComputeInt64Size(21, ExpirationTimestamp);
        }
        if (hasChannel)
        {
            size += pb::CodedOutputStream.ComputeStringSize(22, Channel);
        }
        if (hasComment)
        {
            size += pb::CodedOutputStream.ComputeStringSize(23, Comment);
        }
        if (hasClosePositionDetails)
        {
            size += pb::CodedOutputStream.ComputeMessageSize(24, ClosePositionDetails);
        }
        if (hasClientOrderId)
        {
            size += pb::CodedOutputStream.ComputeStringSize(25, ClientOrderId);
        }
        if (hasStopOut)
        {
            size += pb::CodedOutputStream.ComputeBoolSize(26, StopOut);
        }
        if (hasSlippageInPoints)
        {
            size += pb::CodedOutputStream.ComputeInt32Size(31, SlippageInPoints);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
    }
    public static ProtoOAOrder ParseFrom(pb::ByteString data)
    {
        return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ProtoOAOrder ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry)
    {
        return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ProtoOAOrder ParseFrom(byte[] data)
    {
        return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ProtoOAOrder ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry)
    {
        return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ProtoOAOrder ParseFrom(global::System.IO.Stream input)
    {
        return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ProtoOAOrder ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
    {
        return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ProtoOAOrder ParseDelimitedFrom(global::System.IO.Stream input)
    {
        return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ProtoOAOrder ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
    {
        return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ProtoOAOrder ParseFrom(pb::ICodedInputStream input)
    {
        return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ProtoOAOrder ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
    {
        return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ProtoOAOrder MakeReadOnly()
    {
        return this;
    }

    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ProtoOAOrder prototype)
    {
        return new Builder(prototype);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<ProtoOAOrder, Builder>
    {
        protected override Builder ThisBuilder
        {
            get { return this; }
        }
        public Builder()
        {
            result = DefaultInstance;
            resultIsReadOnly = true;
        }
        internal Builder(ProtoOAOrder cloneFrom)
        {
            result = cloneFrom;
            resultIsReadOnly = true;
        }

        private bool resultIsReadOnly;
        private ProtoOAOrder result;

        private ProtoOAOrder PrepareBuilder()
        {
            if (resultIsReadOnly)
            {
                ProtoOAOrder original = result;
                result = new ProtoOAOrder();
                resultIsReadOnly = false;
                MergeFrom(original);
            }
            return result;
        }

        public override bool IsInitialized
        {
            get { return result.IsInitialized; }
        }

        protected override ProtoOAOrder MessageBeingBuilt
        {
            get { return PrepareBuilder(); }
        }

        public override Builder Clear()
        {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
        }

        public override Builder Clone()
        {
            if (resultIsReadOnly)
            {
                return new Builder(result);
            }
            else
            {
                return new Builder().MergeFrom(result);
            }
        }

        public override pbd::MessageDescriptor DescriptorForType
        {
            get { return global::ProtoOAOrder.Descriptor; }
        }

        public override ProtoOAOrder DefaultInstanceForType
        {
            get { return global::ProtoOAOrder.DefaultInstance; }
        }

        public override ProtoOAOrder BuildPartial()
        {
            if (resultIsReadOnly)
            {
                return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
        }

        public override Builder MergeFrom(pb::IMessage other)
        {
            if (other is ProtoOAOrder)
            {
                return MergeFrom((ProtoOAOrder)other);
            }
            else
            {
                base.MergeFrom(other);
                return this;
            }
        }

        public override Builder MergeFrom(ProtoOAOrder other)
        {
            if (other == global::ProtoOAOrder.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasOrderId)
            {
                OrderId = other.OrderId;
            }
            if (other.HasAccountId)
            {
                AccountId = other.AccountId;
            }
            if (other.HasOrderType)
            {
                OrderType = other.OrderType;
            }
            if (other.HasTradeSide)
            {
                TradeSide = other.TradeSide;
            }
            if (other.HasSymbolName)
            {
                SymbolName = other.SymbolName;
            }
            if (other.HasClosingOrder)
            {
                ClosingOrder = other.ClosingOrder;
            }
            if (other.HasRequestedVolume)
            {
                RequestedVolume = other.RequestedVolume;
            }
            if (other.HasExecutedVolume)
            {
                ExecutedVolume = other.ExecutedVolume;
            }
            if (other.HasExecutionPrice)
            {
                ExecutionPrice = other.ExecutionPrice;
            }
            if (other.HasLimitPrice)
            {
                LimitPrice = other.LimitPrice;
            }
            if (other.HasStopPrice)
            {
                StopPrice = other.StopPrice;
            }
            if (other.HasStopLossPrice)
            {
                StopLossPrice = other.StopLossPrice;
            }
            if (other.HasTakeProfitPrice)
            {
                TakeProfitPrice = other.TakeProfitPrice;
            }
            if (other.HasBaseSlippagePrice)
            {
                BaseSlippagePrice = other.BaseSlippagePrice;
            }
            if (other.HasSlippageInPips)
            {
                SlippageInPips = other.SlippageInPips;
            }
            if (other.HasRelativeStopLossInPips)
            {
                RelativeStopLossInPips = other.RelativeStopLossInPips;
            }
            if (other.HasRelativeTakeProfitInPips)
            {
                RelativeTakeProfitInPips = other.RelativeTakeProfitInPips;
            }
            if (other.HasCommission)
            {
                Commission = other.Commission;
            }
            if (other.HasOpenTimestamp)
            {
                OpenTimestamp = other.OpenTimestamp;
            }
            if (other.HasCloseTimestamp)
            {
                CloseTimestamp = other.CloseTimestamp;
            }
            if (other.HasExpirationTimestamp)
            {
                ExpirationTimestamp = other.ExpirationTimestamp;
            }
            if (other.HasChannel)
            {
                Channel = other.Channel;
            }
            if (other.HasComment)
            {
                Comment = other.Comment;
            }
            if (other.HasClosePositionDetails)
            {
                MergeClosePositionDetails(other.ClosePositionDetails);
            }
            if (other.HasClientOrderId)
            {
                ClientOrderId = other.ClientOrderId;
            }
            if (other.HasStopOut)
            {
                StopOut = other.StopOut;
            }
            if (other.HasSlippageInPoints)
            {
                SlippageInPoints = other.SlippageInPoints;
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
        }

        public override Builder MergeFrom(pb::ICodedInputStream input)
        {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
        }

        public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
        {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name))
            {
                if (tag == 0 && field_name != null)
                {
                    int field_ordinal = global::System.Array.BinarySearch(_protoOAOrderFieldNames, field_name, global::System.StringComparer.Ordinal);
                    if (field_ordinal >= 0)
                        tag = _protoOAOrderFieldTags[field_ordinal];
                    else
                    {
                        if (unknownFields == null)
                        {
                            unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                        }
                        ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                        continue;
                    }
                }
                switch (tag)
                {
                    case 0:
                        {
                            throw pb::InvalidProtocolBufferException.InvalidTag();
                        }
                    default:
                        {
                            if (pb::WireFormat.IsEndGroupTag(tag))
                            {
                                if (unknownFields != null)
                                {
                                    this.UnknownFields = unknownFields.Build();
                                }
                                return this;
                            }
                            if (unknownFields == null)
                            {
                                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                            }
                            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                            break;
                        }
                    case 8:
                        {
                            result.hasOrderId = input.ReadInt64(ref result.orderId_);
                            break;
                        }
                    case 16:
                        {
                            result.hasAccountId = input.ReadInt64(ref result.accountId_);
                            break;
                        }
                    case 24:
                        {
                            object unknown;
                            if (input.ReadEnum(ref result.orderType_, out unknown))
                            {
                                result.hasOrderType = true;
                            }
                            else if (unknown is int)
                            {
                                if (unknownFields == null)
                                {
                                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                                }
                                unknownFields.MergeVarintField(3, (ulong)(int)unknown);
                            }
                            break;
                        }
                    case 32:
                        {
                            object unknown;
                            if (input.ReadEnum(ref result.tradeSide_, out unknown))
                            {
                                result.hasTradeSide = true;
                            }
                            else if (unknown is int)
                            {
                                if (unknownFields == null)
                                {
                                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                                }
                                unknownFields.MergeVarintField(4, (ulong)(int)unknown);
                            }
                            break;
                        }
                    case 42:
                        {
                            result.hasSymbolName = input.ReadString(ref result.symbolName_);
                            break;
                        }
                    case 48:
                        {
                            result.hasClosingOrder = input.ReadBool(ref result.closingOrder_);
                            break;
                        }
                    case 56:
                        {
                            result.hasRequestedVolume = input.ReadInt64(ref result.requestedVolume_);
                            break;
                        }
                    case 64:
                        {
                            result.hasExecutedVolume = input.ReadInt64(ref result.executedVolume_);
                            break;
                        }
                    case 73:
                        {
                            result.hasExecutionPrice = input.ReadDouble(ref result.executionPrice_);
                            break;
                        }
                    case 81:
                        {
                            result.hasLimitPrice = input.ReadDouble(ref result.limitPrice_);
                            break;
                        }
                    case 89:
                        {
                            result.hasStopPrice = input.ReadDouble(ref result.stopPrice_);
                            break;
                        }
                    case 97:
                        {
                            result.hasStopLossPrice = input.ReadDouble(ref result.stopLossPrice_);
                            break;
                        }
                    case 105:
                        {
                            result.hasTakeProfitPrice = input.ReadDouble(ref result.takeProfitPrice_);
                            break;
                        }
                    case 113:
                        {
                            result.hasBaseSlippagePrice = input.ReadDouble(ref result.baseSlippagePrice_);
                            break;
                        }
                    case 120:
                        {
                            result.hasSlippageInPips = input.ReadInt64(ref result.slippageInPips_);
                            break;
                        }
                    case 128:
                        {
                            result.hasRelativeStopLossInPips = input.ReadInt32(ref result.relativeStopLossInPips_);
                            break;
                        }
                    case 136:
                        {
                            result.hasRelativeTakeProfitInPips = input.ReadInt32(ref result.relativeTakeProfitInPips_);
                            break;
                        }
                    case 144:
                        {
                            result.hasCommission = input.ReadInt64(ref result.commission_);
                            break;
                        }
                    case 152:
                        {
                            result.hasOpenTimestamp = input.ReadInt64(ref result.openTimestamp_);
                            break;
                        }
                    case 160:
                        {
                            result.hasCloseTimestamp = input.ReadInt64(ref result.closeTimestamp_);
                            break;
                        }
                    case 168:
                        {
                            result.hasExpirationTimestamp = input.ReadInt64(ref result.expirationTimestamp_);
                            break;
                        }
                    case 178:
                        {
                            result.hasChannel = input.ReadString(ref result.channel_);
                            break;
                        }
                    case 186:
                        {
                            result.hasComment = input.ReadString(ref result.comment_);
                            break;
                        }
                    case 194:
                        {
                            global::ProtoOAClosePositionDetails.Builder subBuilder = global::ProtoOAClosePositionDetails.CreateBuilder();
                            if (result.hasClosePositionDetails)
                            {
                                subBuilder.MergeFrom(ClosePositionDetails);
                            }
                            input.ReadMessage(subBuilder, extensionRegistry);
                            ClosePositionDetails = subBuilder.BuildPartial();
                            break;
                        }
                    case 202:
                        {
                            result.hasClientOrderId = input.ReadString(ref result.clientOrderId_);
                            break;
                        }
                    case 208:
                        {
                            result.hasStopOut = input.ReadBool(ref result.stopOut_);
                            break;
                        }
                    case 248:
                        {
                            result.hasSlippageInPoints = input.ReadInt32(ref result.slippageInPoints_);
                            break;
                        }
                }
            }

            if (unknownFields != null)
            {
                this.UnknownFields = unknownFields.Build();
            }
            return this;
        }


        public bool HasOrderId
        {
            get { return result.hasOrderId; }
        }
        public long OrderId
        {
            get { return result.OrderId; }
            set { SetOrderId(value); }
        }
        public Builder SetOrderId(long value)
        {
            PrepareBuilder();
            result.hasOrderId = true;
            result.orderId_ = value;
            return this;
        }
        public Builder ClearOrderId()
        {
            PrepareBuilder();
            result.hasOrderId = false;
            result.orderId_ = 0L;
            return this;
        }

        public bool HasAccountId
        {
            get { return result.hasAccountId; }
        }
        public long AccountId
        {
            get { return result.AccountId; }
            set { SetAccountId(value); }
        }
        public Builder SetAccountId(long value)
        {
            PrepareBuilder();
            result.hasAccountId = true;
            result.accountId_ = value;
            return this;
        }
        public Builder ClearAccountId()
        {
            PrepareBuilder();
            result.hasAccountId = false;
            result.accountId_ = 0L;
            return this;
        }

        public bool HasOrderType
        {
            get { return result.hasOrderType; }
        }
        public global::ProtoOAOrderType OrderType
        {
            get { return result.OrderType; }
            set { SetOrderType(value); }
        }
        public Builder SetOrderType(global::ProtoOAOrderType value)
        {
            PrepareBuilder();
            result.hasOrderType = true;
            result.orderType_ = value;
            return this;
        }
        public Builder ClearOrderType()
        {
            PrepareBuilder();
            result.hasOrderType = false;
            result.orderType_ = global::ProtoOAOrderType.OA_MARKET;
            return this;
        }

        public bool HasTradeSide
        {
            get { return result.hasTradeSide; }
        }
        public global::ProtoTradeSide TradeSide
        {
            get { return result.TradeSide; }
            set { SetTradeSide(value); }
        }
        public Builder SetTradeSide(global::ProtoTradeSide value)
        {
            PrepareBuilder();
            result.hasTradeSide = true;
            result.tradeSide_ = value;
            return this;
        }
        public Builder ClearTradeSide()
        {
            PrepareBuilder();
            result.hasTradeSide = false;
            result.tradeSide_ = global::ProtoTradeSide.BUY;
            return this;
        }

        public bool HasSymbolName
        {
            get { return result.hasSymbolName; }
        }
        public string SymbolName
        {
            get { return result.SymbolName; }
            set { SetSymbolName(value); }
        }
        public Builder SetSymbolName(string value)
        {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasSymbolName = true;
            result.symbolName_ = value;
            return this;
        }
        public Builder ClearSymbolName()
        {
            PrepareBuilder();
            result.hasSymbolName = false;
            result.symbolName_ = "";
            return this;
        }

        public bool HasClosingOrder
        {
            get { return result.hasClosingOrder; }
        }
        public bool ClosingOrder
        {
            get { return result.ClosingOrder; }
            set { SetClosingOrder(value); }
        }
        public Builder SetClosingOrder(bool value)
        {
            PrepareBuilder();
            result.hasClosingOrder = true;
            result.closingOrder_ = value;
            return this;
        }
        public Builder ClearClosingOrder()
        {
            PrepareBuilder();
            result.hasClosingOrder = false;
            result.closingOrder_ = false;
            return this;
        }

        public bool HasRequestedVolume
        {
            get { return result.hasRequestedVolume; }
        }
        public long RequestedVolume
        {
            get { return result.RequestedVolume; }
            set { SetRequestedVolume(value); }
        }
        public Builder SetRequestedVolume(long value)
        {
            PrepareBuilder();
            result.hasRequestedVolume = true;
            result.requestedVolume_ = value;
            return this;
        }
        public Builder ClearRequestedVolume()
        {
            PrepareBuilder();
            result.hasRequestedVolume = false;
            result.requestedVolume_ = 0L;
            return this;
        }

        public bool HasExecutedVolume
        {
            get { return result.hasExecutedVolume; }
        }
        public long ExecutedVolume
        {
            get { return result.ExecutedVolume; }
            set { SetExecutedVolume(value); }
        }
        public Builder SetExecutedVolume(long value)
        {
            PrepareBuilder();
            result.hasExecutedVolume = true;
            result.executedVolume_ = value;
            return this;
        }
        public Builder ClearExecutedVolume()
        {
            PrepareBuilder();
            result.hasExecutedVolume = false;
            result.executedVolume_ = 0L;
            return this;
        }

        public bool HasExecutionPrice
        {
            get { return result.hasExecutionPrice; }
        }
        public double ExecutionPrice
        {
            get { return result.ExecutionPrice; }
            set { SetExecutionPrice(value); }
        }
        public Builder SetExecutionPrice(double value)
        {
            PrepareBuilder();
            result.hasExecutionPrice = true;
            result.executionPrice_ = value;
            return this;
        }
        public Builder ClearExecutionPrice()
        {
            PrepareBuilder();
            result.hasExecutionPrice = false;
            result.executionPrice_ = 0D;
            return this;
        }

        public bool HasLimitPrice
        {
            get { return result.hasLimitPrice; }
        }
        public double LimitPrice
        {
            get { return result.LimitPrice; }
            set { SetLimitPrice(value); }
        }
        public Builder SetLimitPrice(double value)
        {
            PrepareBuilder();
            result.hasLimitPrice = true;
            result.limitPrice_ = value;
            return this;
        }
        public Builder ClearLimitPrice()
        {
            PrepareBuilder();
            result.hasLimitPrice = false;
            result.limitPrice_ = 0D;
            return this;
        }

        public bool HasStopPrice
        {
            get { return result.hasStopPrice; }
        }
        public double StopPrice
        {
            get { return result.StopPrice; }
            set { SetStopPrice(value); }
        }
        public Builder SetStopPrice(double value)
        {
            PrepareBuilder();
            result.hasStopPrice = true;
            result.stopPrice_ = value;
            return this;
        }
        public Builder ClearStopPrice()
        {
            PrepareBuilder();
            result.hasStopPrice = false;
            result.stopPrice_ = 0D;
            return this;
        }

        public bool HasStopLossPrice
        {
            get { return result.hasStopLossPrice; }
        }
        public double StopLossPrice
        {
            get { return result.StopLossPrice; }
            set { SetStopLossPrice(value); }
        }
        public Builder SetStopLossPrice(double value)
        {
            PrepareBuilder();
            result.hasStopLossPrice = true;
            result.stopLossPrice_ = value;
            return this;
        }
        public Builder ClearStopLossPrice()
        {
            PrepareBuilder();
            result.hasStopLossPrice = false;
            result.stopLossPrice_ = 0D;
            return this;
        }

        public bool HasTakeProfitPrice
        {
            get { return result.hasTakeProfitPrice; }
        }
        public double TakeProfitPrice
        {
            get { return result.TakeProfitPrice; }
            set { SetTakeProfitPrice(value); }
        }
        public Builder SetTakeProfitPrice(double value)
        {
            PrepareBuilder();
            result.hasTakeProfitPrice = true;
            result.takeProfitPrice_ = value;
            return this;
        }
        public Builder ClearTakeProfitPrice()
        {
            PrepareBuilder();
            result.hasTakeProfitPrice = false;
            result.takeProfitPrice_ = 0D;
            return this;
        }

        public bool HasBaseSlippagePrice
        {
            get { return result.hasBaseSlippagePrice; }
        }
        public double BaseSlippagePrice
        {
            get { return result.BaseSlippagePrice; }
            set { SetBaseSlippagePrice(value); }
        }
        public Builder SetBaseSlippagePrice(double value)
        {
            PrepareBuilder();
            result.hasBaseSlippagePrice = true;
            result.baseSlippagePrice_ = value;
            return this;
        }
        public Builder ClearBaseSlippagePrice()
        {
            PrepareBuilder();
            result.hasBaseSlippagePrice = false;
            result.baseSlippagePrice_ = 0D;
            return this;
        }

        public bool HasSlippageInPips
        {
            get { return result.hasSlippageInPips; }
        }
        public long SlippageInPips
        {
            get { return result.SlippageInPips; }
            set { SetSlippageInPips(value); }
        }
        public Builder SetSlippageInPips(long value)
        {
            PrepareBuilder();
            result.hasSlippageInPips = true;
            result.slippageInPips_ = value;
            return this;
        }
        public Builder ClearSlippageInPips()
        {
            PrepareBuilder();
            result.hasSlippageInPips = false;
            result.slippageInPips_ = 0L;
            return this;
        }

        public bool HasRelativeStopLossInPips
        {
            get { return result.hasRelativeStopLossInPips; }
        }
        public int RelativeStopLossInPips
        {
            get { return result.RelativeStopLossInPips; }
            set { SetRelativeStopLossInPips(value); }
        }
        public Builder SetRelativeStopLossInPips(int value)
        {
            PrepareBuilder();
            result.hasRelativeStopLossInPips = true;
            result.relativeStopLossInPips_ = value;
            return this;
        }
        public Builder ClearRelativeStopLossInPips()
        {
            PrepareBuilder();
            result.hasRelativeStopLossInPips = false;
            result.relativeStopLossInPips_ = 0;
            return this;
        }

        public bool HasRelativeTakeProfitInPips
        {
            get { return result.hasRelativeTakeProfitInPips; }
        }
        public int RelativeTakeProfitInPips
        {
            get { return result.RelativeTakeProfitInPips; }
            set { SetRelativeTakeProfitInPips(value); }
        }
        public Builder SetRelativeTakeProfitInPips(int value)
        {
            PrepareBuilder();
            result.hasRelativeTakeProfitInPips = true;
            result.relativeTakeProfitInPips_ = value;
            return this;
        }
        public Builder ClearRelativeTakeProfitInPips()
        {
            PrepareBuilder();
            result.hasRelativeTakeProfitInPips = false;
            result.relativeTakeProfitInPips_ = 0;
            return this;
        }

        public bool HasCommission
        {
            get { return result.hasCommission; }
        }
        public long Commission
        {
            get { return result.Commission; }
            set { SetCommission(value); }
        }
        public Builder SetCommission(long value)
        {
            PrepareBuilder();
            result.hasCommission = true;
            result.commission_ = value;
            return this;
        }
        public Builder ClearCommission()
        {
            PrepareBuilder();
            result.hasCommission = false;
            result.commission_ = 0L;
            return this;
        }

        public bool HasOpenTimestamp
        {
            get { return result.hasOpenTimestamp; }
        }
        public long OpenTimestamp
        {
            get { return result.OpenTimestamp; }
            set { SetOpenTimestamp(value); }
        }
        public Builder SetOpenTimestamp(long value)
        {
            PrepareBuilder();
            result.hasOpenTimestamp = true;
            result.openTimestamp_ = value;
            return this;
        }
        public Builder ClearOpenTimestamp()
        {
            PrepareBuilder();
            result.hasOpenTimestamp = false;
            result.openTimestamp_ = 0L;
            return this;
        }

        public bool HasCloseTimestamp
        {
            get { return result.hasCloseTimestamp; }
        }
        public long CloseTimestamp
        {
            get { return result.CloseTimestamp; }
            set { SetCloseTimestamp(value); }
        }
        public Builder SetCloseTimestamp(long value)
        {
            PrepareBuilder();
            result.hasCloseTimestamp = true;
            result.closeTimestamp_ = value;
            return this;
        }
        public Builder ClearCloseTimestamp()
        {
            PrepareBuilder();
            result.hasCloseTimestamp = false;
            result.closeTimestamp_ = 0L;
            return this;
        }

        public bool HasExpirationTimestamp
        {
            get { return result.hasExpirationTimestamp; }
        }
        public long ExpirationTimestamp
        {
            get { return result.ExpirationTimestamp; }
            set { SetExpirationTimestamp(value); }
        }
        public Builder SetExpirationTimestamp(long value)
        {
            PrepareBuilder();
            result.hasExpirationTimestamp = true;
            result.expirationTimestamp_ = value;
            return this;
        }
        public Builder ClearExpirationTimestamp()
        {
            PrepareBuilder();
            result.hasExpirationTimestamp = false;
            result.expirationTimestamp_ = 0L;
            return this;
        }

        public bool HasChannel
        {
            get { return result.hasChannel; }
        }
        public string Channel
        {
            get { return result.Channel; }
            set { SetChannel(value); }
        }
        public Builder SetChannel(string value)
        {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasChannel = true;
            result.channel_ = value;
            return this;
        }
        public Builder ClearChannel()
        {
            PrepareBuilder();
            result.hasChannel = false;
            result.channel_ = "";
            return this;
        }

        public bool HasComment
        {
            get { return result.hasComment; }
        }
        public string Comment
        {
            get { return result.Comment; }
            set { SetComment(value); }
        }
        public Builder SetComment(string value)
        {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasComment = true;
            result.comment_ = value;
            return this;
        }
        public Builder ClearComment()
        {
            PrepareBuilder();
            result.hasComment = false;
            result.comment_ = "";
            return this;
        }

        public bool HasClosePositionDetails
        {
            get { return result.hasClosePositionDetails; }
        }
        public global::ProtoOAClosePositionDetails ClosePositionDetails
        {
            get { return result.ClosePositionDetails; }
            set { SetClosePositionDetails(value); }
        }
        public Builder SetClosePositionDetails(global::ProtoOAClosePositionDetails value)
        {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasClosePositionDetails = true;
            result.closePositionDetails_ = value;
            return this;
        }
        public Builder SetClosePositionDetails(global::ProtoOAClosePositionDetails.Builder builderForValue)
        {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.hasClosePositionDetails = true;
            result.closePositionDetails_ = builderForValue.Build();
            return this;
        }
        public Builder MergeClosePositionDetails(global::ProtoOAClosePositionDetails value)
        {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            if (result.hasClosePositionDetails &&
                result.closePositionDetails_ != global::ProtoOAClosePositionDetails.DefaultInstance)
            {
                result.closePositionDetails_ = global::ProtoOAClosePositionDetails.CreateBuilder(result.closePositionDetails_).MergeFrom(value).BuildPartial();
            }
            else
            {
                result.closePositionDetails_ = value;
            }
            result.hasClosePositionDetails = true;
            return this;
        }
        public Builder ClearClosePositionDetails()
        {
            PrepareBuilder();
            result.hasClosePositionDetails = false;
            result.closePositionDetails_ = null;
            return this;
        }

        public bool HasClientOrderId
        {
            get { return result.hasClientOrderId; }
        }
        public string ClientOrderId
        {
            get { return result.ClientOrderId; }
            set { SetClientOrderId(value); }
        }
        public Builder SetClientOrderId(string value)
        {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasClientOrderId = true;
            result.clientOrderId_ = value;
            return this;
        }
        public Builder ClearClientOrderId()
        {
            PrepareBuilder();
            result.hasClientOrderId = false;
            result.clientOrderId_ = "";
            return this;
        }

        public bool HasStopOut
        {
            get { return result.hasStopOut; }
        }
        public bool StopOut
        {
            get { return result.StopOut; }
            set { SetStopOut(value); }
        }
        public Builder SetStopOut(bool value)
        {
            PrepareBuilder();
            result.hasStopOut = true;
            result.stopOut_ = value;
            return this;
        }
        public Builder ClearStopOut()
        {
            PrepareBuilder();
            result.hasStopOut = false;
            result.stopOut_ = false;
            return this;
        }

        public bool HasSlippageInPoints
        {
            get { return result.hasSlippageInPoints; }
        }
        public int SlippageInPoints
        {
            get { return result.SlippageInPoints; }
            set { SetSlippageInPoints(value); }
        }
        public Builder SetSlippageInPoints(int value)
        {
            PrepareBuilder();
            result.hasSlippageInPoints = true;
            result.slippageInPoints_ = value;
            return this;
        }
        public Builder ClearSlippageInPoints()
        {
            PrepareBuilder();
            result.hasSlippageInPoints = false;
            result.slippageInPoints_ = 0;
            return this;
        }
    }
    static ProtoOAOrder()
    {
        object.ReferenceEquals(global::OpenApiModelMessages.Descriptor, null);
    }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class ProtoOAPosition : pb::GeneratedMessage<ProtoOAPosition, ProtoOAPosition.Builder>
{
    private ProtoOAPosition() { }
    private static readonly ProtoOAPosition defaultInstance = new ProtoOAPosition().MakeReadOnly();
    private static readonly string[] _protoOAPositionFieldNames = new string[] { "accountId", "channel", "closeTimestamp", "comment", "commission", "entryPrice", "openTimestamp", "positionId", "positionStatus", "stopLossPrice", "swap", "symbolName", "takeProfitPrice", "tradeSide", "volume" };
    private static readonly uint[] _protoOAPositionFieldTags = new uint[] { 16, 114, 88, 122, 72, 57, 80, 8, 24, 97, 64, 42, 105, 32, 48 };
    public static ProtoOAPosition DefaultInstance
    {
        get { return defaultInstance; }
    }

    public override ProtoOAPosition DefaultInstanceForType
    {
        get { return DefaultInstance; }
    }

    protected override ProtoOAPosition ThisMessage
    {
        get { return this; }
    }

    public static pbd::MessageDescriptor Descriptor
    {
        get { return global::OpenApiModelMessages.internal__static_ProtoOAPosition__Descriptor; }
    }

    protected override pb::FieldAccess.FieldAccessorTable<ProtoOAPosition, ProtoOAPosition.Builder> InternalFieldAccessors
    {
        get { return global::OpenApiModelMessages.internal__static_ProtoOAPosition__FieldAccessorTable; }
    }

    public const int PositionIdFieldNumber = 1;
    private bool hasPositionId;
    private long positionId_;
    public bool HasPositionId
    {
        get { return hasPositionId; }
    }
    public long PositionId
    {
        get { return positionId_; }
    }

    public const int AccountIdFieldNumber = 2;
    private bool hasAccountId;
    private long accountId_;
    public bool HasAccountId
    {
        get { return hasAccountId; }
    }
    public long AccountId
    {
        get { return accountId_; }
    }

    public const int PositionStatusFieldNumber = 3;
    private bool hasPositionStatus;
    private global::ProtoOAPositionStatus positionStatus_ = global::ProtoOAPositionStatus.OA_POSITION_STATUS_OPEN;
    public bool HasPositionStatus
    {
        get { return hasPositionStatus; }
    }
    public global::ProtoOAPositionStatus PositionStatus
    {
        get { return positionStatus_; }
    }

    public const int TradeSideFieldNumber = 4;
    private bool hasTradeSide;
    private global::ProtoTradeSide tradeSide_ = global::ProtoTradeSide.BUY;
    public bool HasTradeSide
    {
        get { return hasTradeSide; }
    }
    public global::ProtoTradeSide TradeSide
    {
        get { return tradeSide_; }
    }

    public const int SymbolNameFieldNumber = 5;
    private bool hasSymbolName;
    private string symbolName_ = "";
    public bool HasSymbolName
    {
        get { return hasSymbolName; }
    }
    public string SymbolName
    {
        get { return symbolName_; }
    }

    public const int VolumeFieldNumber = 6;
    private bool hasVolume;
    private long volume_;
    public bool HasVolume
    {
        get { return hasVolume; }
    }
    public long Volume
    {
        get { return volume_; }
    }

    public const int EntryPriceFieldNumber = 7;
    private bool hasEntryPrice;
    private double entryPrice_;
    public bool HasEntryPrice
    {
        get { return hasEntryPrice; }
    }
    public double EntryPrice
    {
        get { return entryPrice_; }
    }

    public const int SwapFieldNumber = 8;
    private bool hasSwap;
    private long swap_;
    public bool HasSwap
    {
        get { return hasSwap; }
    }
    public long Swap
    {
        get { return swap_; }
    }

    public const int CommissionFieldNumber = 9;
    private bool hasCommission;
    private long commission_;
    public bool HasCommission
    {
        get { return hasCommission; }
    }
    public long Commission
    {
        get { return commission_; }
    }

    public const int OpenTimestampFieldNumber = 10;
    private bool hasOpenTimestamp;
    private long openTimestamp_;
    public bool HasOpenTimestamp
    {
        get { return hasOpenTimestamp; }
    }
    public long OpenTimestamp
    {
        get { return openTimestamp_; }
    }

    public const int CloseTimestampFieldNumber = 11;
    private bool hasCloseTimestamp;
    private long closeTimestamp_;
    public bool HasCloseTimestamp
    {
        get { return hasCloseTimestamp; }
    }
    public long CloseTimestamp
    {
        get { return closeTimestamp_; }
    }

    public const int StopLossPriceFieldNumber = 12;
    private bool hasStopLossPrice;
    private double stopLossPrice_;
    public bool HasStopLossPrice
    {
        get { return hasStopLossPrice; }
    }
    public double StopLossPrice
    {
        get { return stopLossPrice_; }
    }

    public const int TakeProfitPriceFieldNumber = 13;
    private bool hasTakeProfitPrice;
    private double takeProfitPrice_;
    public bool HasTakeProfitPrice
    {
        get { return hasTakeProfitPrice; }
    }
    public double TakeProfitPrice
    {
        get { return takeProfitPrice_; }
    }

    public const int ChannelFieldNumber = 14;
    private bool hasChannel;
    private string channel_ = "";
    public bool HasChannel
    {
        get { return hasChannel; }
    }
    public string Channel
    {
        get { return channel_; }
    }

    public const int CommentFieldNumber = 15;
    private bool hasComment;
    private string comment_ = "";
    public bool HasComment
    {
        get { return hasComment; }
    }
    public string Comment
    {
        get { return comment_; }
    }

    public override bool IsInitialized
    {
        get
        {
            if (!hasPositionId) return false;
            if (!hasAccountId) return false;
            if (!hasPositionStatus) return false;
            if (!hasTradeSide) return false;
            if (!hasSymbolName) return false;
            if (!hasVolume) return false;
            if (!hasEntryPrice) return false;
            if (!hasOpenTimestamp) return false;
            return true;
        }
    }

    public override void WriteTo(pb::ICodedOutputStream output)
    {
        CalcSerializedSize();
        string[] field_names = _protoOAPositionFieldNames;
        if (hasPositionId)
        {
            output.WriteInt64(1, field_names[7], PositionId);
        }
        if (hasAccountId)
        {
            output.WriteInt64(2, field_names[0], AccountId);
        }
        if (hasPositionStatus)
        {
            output.WriteEnum(3, field_names[8], (int)PositionStatus, PositionStatus);
        }
        if (hasTradeSide)
        {
            output.WriteEnum(4, field_names[13], (int)TradeSide, TradeSide);
        }
        if (hasSymbolName)
        {
            output.WriteString(5, field_names[11], SymbolName);
        }
        if (hasVolume)
        {
            output.WriteInt64(6, field_names[14], Volume);
        }
        if (hasEntryPrice)
        {
            output.WriteDouble(7, field_names[5], EntryPrice);
        }
        if (hasSwap)
        {
            output.WriteInt64(8, field_names[10], Swap);
        }
        if (hasCommission)
        {
            output.WriteInt64(9, field_names[4], Commission);
        }
        if (hasOpenTimestamp)
        {
            output.WriteInt64(10, field_names[6], OpenTimestamp);
        }
        if (hasCloseTimestamp)
        {
            output.WriteInt64(11, field_names[2], CloseTimestamp);
        }
        if (hasStopLossPrice)
        {
            output.WriteDouble(12, field_names[9], StopLossPrice);
        }
        if (hasTakeProfitPrice)
        {
            output.WriteDouble(13, field_names[12], TakeProfitPrice);
        }
        if (hasChannel)
        {
            output.WriteString(14, field_names[1], Channel);
        }
        if (hasComment)
        {
            output.WriteString(15, field_names[3], Comment);
        }
        UnknownFields.WriteTo(output);
    }

    private int memoizedSerializedSize = -1;
    public override int SerializedSize
    {
        get
        {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            return CalcSerializedSize();
        }
    }

    private int CalcSerializedSize()
    {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (hasPositionId)
        {
            size += pb::CodedOutputStream.ComputeInt64Size(1, PositionId);
        }
        if (hasAccountId)
        {
            size += pb::CodedOutputStream.ComputeInt64Size(2, AccountId);
        }
        if (hasPositionStatus)
        {
            size += pb::CodedOutputStream.ComputeEnumSize(3, (int)PositionStatus);
        }
        if (hasTradeSide)
        {
            size += pb::CodedOutputStream.ComputeEnumSize(4, (int)TradeSide);
        }
        if (hasSymbolName)
        {
            size += pb::CodedOutputStream.ComputeStringSize(5, SymbolName);
        }
        if (hasVolume)
        {
            size += pb::CodedOutputStream.ComputeInt64Size(6, Volume);
        }
        if (hasEntryPrice)
        {
            size += pb::CodedOutputStream.ComputeDoubleSize(7, EntryPrice);
        }
        if (hasSwap)
        {
            size += pb::CodedOutputStream.ComputeInt64Size(8, Swap);
        }
        if (hasCommission)
        {
            size += pb::CodedOutputStream.ComputeInt64Size(9, Commission);
        }
        if (hasOpenTimestamp)
        {
            size += pb::CodedOutputStream.ComputeInt64Size(10, OpenTimestamp);
        }
        if (hasCloseTimestamp)
        {
            size += pb::CodedOutputStream.ComputeInt64Size(11, CloseTimestamp);
        }
        if (hasStopLossPrice)
        {
            size += pb::CodedOutputStream.ComputeDoubleSize(12, StopLossPrice);
        }
        if (hasTakeProfitPrice)
        {
            size += pb::CodedOutputStream.ComputeDoubleSize(13, TakeProfitPrice);
        }
        if (hasChannel)
        {
            size += pb::CodedOutputStream.ComputeStringSize(14, Channel);
        }
        if (hasComment)
        {
            size += pb::CodedOutputStream.ComputeStringSize(15, Comment);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
    }
    public static ProtoOAPosition ParseFrom(pb::ByteString data)
    {
        return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ProtoOAPosition ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry)
    {
        return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ProtoOAPosition ParseFrom(byte[] data)
    {
        return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ProtoOAPosition ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry)
    {
        return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ProtoOAPosition ParseFrom(global::System.IO.Stream input)
    {
        return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ProtoOAPosition ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
    {
        return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ProtoOAPosition ParseDelimitedFrom(global::System.IO.Stream input)
    {
        return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ProtoOAPosition ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
    {
        return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ProtoOAPosition ParseFrom(pb::ICodedInputStream input)
    {
        return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ProtoOAPosition ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
    {
        return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ProtoOAPosition MakeReadOnly()
    {
        return this;
    }

    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ProtoOAPosition prototype)
    {
        return new Builder(prototype);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<ProtoOAPosition, Builder>
    {
        protected override Builder ThisBuilder
        {
            get { return this; }
        }
        public Builder()
        {
            result = DefaultInstance;
            resultIsReadOnly = true;
        }
        internal Builder(ProtoOAPosition cloneFrom)
        {
            result = cloneFrom;
            resultIsReadOnly = true;
        }

        private bool resultIsReadOnly;
        private ProtoOAPosition result;

        private ProtoOAPosition PrepareBuilder()
        {
            if (resultIsReadOnly)
            {
                ProtoOAPosition original = result;
                result = new ProtoOAPosition();
                resultIsReadOnly = false;
                MergeFrom(original);
            }
            return result;
        }

        public override bool IsInitialized
        {
            get { return result.IsInitialized; }
        }

        protected override ProtoOAPosition MessageBeingBuilt
        {
            get { return PrepareBuilder(); }
        }

        public override Builder Clear()
        {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
        }

        public override Builder Clone()
        {
            if (resultIsReadOnly)
            {
                return new Builder(result);
            }
            else
            {
                return new Builder().MergeFrom(result);
            }
        }

        public override pbd::MessageDescriptor DescriptorForType
        {
            get { return global::ProtoOAPosition.Descriptor; }
        }

        public override ProtoOAPosition DefaultInstanceForType
        {
            get { return global::ProtoOAPosition.DefaultInstance; }
        }

        public override ProtoOAPosition BuildPartial()
        {
            if (resultIsReadOnly)
            {
                return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
        }

        public override Builder MergeFrom(pb::IMessage other)
        {
            if (other is ProtoOAPosition)
            {
                return MergeFrom((ProtoOAPosition)other);
            }
            else
            {
                base.MergeFrom(other);
                return this;
            }
        }

        public override Builder MergeFrom(ProtoOAPosition other)
        {
            if (other == global::ProtoOAPosition.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasPositionId)
            {
                PositionId = other.PositionId;
            }
            if (other.HasAccountId)
            {
                AccountId = other.AccountId;
            }
            if (other.HasPositionStatus)
            {
                PositionStatus = other.PositionStatus;
            }
            if (other.HasTradeSide)
            {
                TradeSide = other.TradeSide;
            }
            if (other.HasSymbolName)
            {
                SymbolName = other.SymbolName;
            }
            if (other.HasVolume)
            {
                Volume = other.Volume;
            }
            if (other.HasEntryPrice)
            {
                EntryPrice = other.EntryPrice;
            }
            if (other.HasSwap)
            {
                Swap = other.Swap;
            }
            if (other.HasCommission)
            {
                Commission = other.Commission;
            }
            if (other.HasOpenTimestamp)
            {
                OpenTimestamp = other.OpenTimestamp;
            }
            if (other.HasCloseTimestamp)
            {
                CloseTimestamp = other.CloseTimestamp;
            }
            if (other.HasStopLossPrice)
            {
                StopLossPrice = other.StopLossPrice;
            }
            if (other.HasTakeProfitPrice)
            {
                TakeProfitPrice = other.TakeProfitPrice;
            }
            if (other.HasChannel)
            {
                Channel = other.Channel;
            }
            if (other.HasComment)
            {
                Comment = other.Comment;
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
        }

        public override Builder MergeFrom(pb::ICodedInputStream input)
        {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
        }

        public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
        {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name))
            {
                if (tag == 0 && field_name != null)
                {
                    int field_ordinal = global::System.Array.BinarySearch(_protoOAPositionFieldNames, field_name, global::System.StringComparer.Ordinal);
                    if (field_ordinal >= 0)
                        tag = _protoOAPositionFieldTags[field_ordinal];
                    else
                    {
                        if (unknownFields == null)
                        {
                            unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                        }
                        ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                        continue;
                    }
                }
                switch (tag)
                {
                    case 0:
                        {
                            throw pb::InvalidProtocolBufferException.InvalidTag();
                        }
                    default:
                        {
                            if (pb::WireFormat.IsEndGroupTag(tag))
                            {
                                if (unknownFields != null)
                                {
                                    this.UnknownFields = unknownFields.Build();
                                }
                                return this;
                            }
                            if (unknownFields == null)
                            {
                                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                            }
                            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                            break;
                        }
                    case 8:
                        {
                            result.hasPositionId = input.ReadInt64(ref result.positionId_);
                            break;
                        }
                    case 16:
                        {
                            result.hasAccountId = input.ReadInt64(ref result.accountId_);
                            break;
                        }
                    case 24:
                        {
                            object unknown;
                            if (input.ReadEnum(ref result.positionStatus_, out unknown))
                            {
                                result.hasPositionStatus = true;
                            }
                            else if (unknown is int)
                            {
                                if (unknownFields == null)
                                {
                                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                                }
                                unknownFields.MergeVarintField(3, (ulong)(int)unknown);
                            }
                            break;
                        }
                    case 32:
                        {
                            object unknown;
                            if (input.ReadEnum(ref result.tradeSide_, out unknown))
                            {
                                result.hasTradeSide = true;
                            }
                            else if (unknown is int)
                            {
                                if (unknownFields == null)
                                {
                                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                                }
                                unknownFields.MergeVarintField(4, (ulong)(int)unknown);
                            }
                            break;
                        }
                    case 42:
                        {
                            result.hasSymbolName = input.ReadString(ref result.symbolName_);
                            break;
                        }
                    case 48:
                        {
                            result.hasVolume = input.ReadInt64(ref result.volume_);
                            break;
                        }
                    case 57:
                        {
                            result.hasEntryPrice = input.ReadDouble(ref result.entryPrice_);
                            break;
                        }
                    case 64:
                        {
                            result.hasSwap = input.ReadInt64(ref result.swap_);
                            break;
                        }
                    case 72:
                        {
                            result.hasCommission = input.ReadInt64(ref result.commission_);
                            break;
                        }
                    case 80:
                        {
                            result.hasOpenTimestamp = input.ReadInt64(ref result.openTimestamp_);
                            break;
                        }
                    case 88:
                        {
                            result.hasCloseTimestamp = input.ReadInt64(ref result.closeTimestamp_);
                            break;
                        }
                    case 97:
                        {
                            result.hasStopLossPrice = input.ReadDouble(ref result.stopLossPrice_);
                            break;
                        }
                    case 105:
                        {
                            result.hasTakeProfitPrice = input.ReadDouble(ref result.takeProfitPrice_);
                            break;
                        }
                    case 114:
                        {
                            result.hasChannel = input.ReadString(ref result.channel_);
                            break;
                        }
                    case 122:
                        {
                            result.hasComment = input.ReadString(ref result.comment_);
                            break;
                        }
                }
            }

            if (unknownFields != null)
            {
                this.UnknownFields = unknownFields.Build();
            }
            return this;
        }


        public bool HasPositionId
        {
            get { return result.hasPositionId; }
        }
        public long PositionId
        {
            get { return result.PositionId; }
            set { SetPositionId(value); }
        }
        public Builder SetPositionId(long value)
        {
            PrepareBuilder();
            result.hasPositionId = true;
            result.positionId_ = value;
            return this;
        }
        public Builder ClearPositionId()
        {
            PrepareBuilder();
            result.hasPositionId = false;
            result.positionId_ = 0L;
            return this;
        }

        public bool HasAccountId
        {
            get { return result.hasAccountId; }
        }
        public long AccountId
        {
            get { return result.AccountId; }
            set { SetAccountId(value); }
        }
        public Builder SetAccountId(long value)
        {
            PrepareBuilder();
            result.hasAccountId = true;
            result.accountId_ = value;
            return this;
        }
        public Builder ClearAccountId()
        {
            PrepareBuilder();
            result.hasAccountId = false;
            result.accountId_ = 0L;
            return this;
        }

        public bool HasPositionStatus
        {
            get { return result.hasPositionStatus; }
        }
        public global::ProtoOAPositionStatus PositionStatus
        {
            get { return result.PositionStatus; }
            set { SetPositionStatus(value); }
        }
        public Builder SetPositionStatus(global::ProtoOAPositionStatus value)
        {
            PrepareBuilder();
            result.hasPositionStatus = true;
            result.positionStatus_ = value;
            return this;
        }
        public Builder ClearPositionStatus()
        {
            PrepareBuilder();
            result.hasPositionStatus = false;
            result.positionStatus_ = global::ProtoOAPositionStatus.OA_POSITION_STATUS_OPEN;
            return this;
        }

        public bool HasTradeSide
        {
            get { return result.hasTradeSide; }
        }
        public global::ProtoTradeSide TradeSide
        {
            get { return result.TradeSide; }
            set { SetTradeSide(value); }
        }
        public Builder SetTradeSide(global::ProtoTradeSide value)
        {
            PrepareBuilder();
            result.hasTradeSide = true;
            result.tradeSide_ = value;
            return this;
        }
        public Builder ClearTradeSide()
        {
            PrepareBuilder();
            result.hasTradeSide = false;
            result.tradeSide_ = global::ProtoTradeSide.BUY;
            return this;
        }

        public bool HasSymbolName
        {
            get { return result.hasSymbolName; }
        }
        public string SymbolName
        {
            get { return result.SymbolName; }
            set { SetSymbolName(value); }
        }
        public Builder SetSymbolName(string value)
        {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasSymbolName = true;
            result.symbolName_ = value;
            return this;
        }
        public Builder ClearSymbolName()
        {
            PrepareBuilder();
            result.hasSymbolName = false;
            result.symbolName_ = "";
            return this;
        }

        public bool HasVolume
        {
            get { return result.hasVolume; }
        }
        public long Volume
        {
            get { return result.Volume; }
            set { SetVolume(value); }
        }
        public Builder SetVolume(long value)
        {
            PrepareBuilder();
            result.hasVolume = true;
            result.volume_ = value;
            return this;
        }
        public Builder ClearVolume()
        {
            PrepareBuilder();
            result.hasVolume = false;
            result.volume_ = 0L;
            return this;
        }

        public bool HasEntryPrice
        {
            get { return result.hasEntryPrice; }
        }
        public double EntryPrice
        {
            get { return result.EntryPrice; }
            set { SetEntryPrice(value); }
        }
        public Builder SetEntryPrice(double value)
        {
            PrepareBuilder();
            result.hasEntryPrice = true;
            result.entryPrice_ = value;
            return this;
        }
        public Builder ClearEntryPrice()
        {
            PrepareBuilder();
            result.hasEntryPrice = false;
            result.entryPrice_ = 0D;
            return this;
        }

        public bool HasSwap
        {
            get { return result.hasSwap; }
        }
        public long Swap
        {
            get { return result.Swap; }
            set { SetSwap(value); }
        }
        public Builder SetSwap(long value)
        {
            PrepareBuilder();
            result.hasSwap = true;
            result.swap_ = value;
            return this;
        }
        public Builder ClearSwap()
        {
            PrepareBuilder();
            result.hasSwap = false;
            result.swap_ = 0L;
            return this;
        }

        public bool HasCommission
        {
            get { return result.hasCommission; }
        }
        public long Commission
        {
            get { return result.Commission; }
            set { SetCommission(value); }
        }
        public Builder SetCommission(long value)
        {
            PrepareBuilder();
            result.hasCommission = true;
            result.commission_ = value;
            return this;
        }
        public Builder ClearCommission()
        {
            PrepareBuilder();
            result.hasCommission = false;
            result.commission_ = 0L;
            return this;
        }

        public bool HasOpenTimestamp
        {
            get { return result.hasOpenTimestamp; }
        }
        public long OpenTimestamp
        {
            get { return result.OpenTimestamp; }
            set { SetOpenTimestamp(value); }
        }
        public Builder SetOpenTimestamp(long value)
        {
            PrepareBuilder();
            result.hasOpenTimestamp = true;
            result.openTimestamp_ = value;
            return this;
        }
        public Builder ClearOpenTimestamp()
        {
            PrepareBuilder();
            result.hasOpenTimestamp = false;
            result.openTimestamp_ = 0L;
            return this;
        }

        public bool HasCloseTimestamp
        {
            get { return result.hasCloseTimestamp; }
        }
        public long CloseTimestamp
        {
            get { return result.CloseTimestamp; }
            set { SetCloseTimestamp(value); }
        }
        public Builder SetCloseTimestamp(long value)
        {
            PrepareBuilder();
            result.hasCloseTimestamp = true;
            result.closeTimestamp_ = value;
            return this;
        }
        public Builder ClearCloseTimestamp()
        {
            PrepareBuilder();
            result.hasCloseTimestamp = false;
            result.closeTimestamp_ = 0L;
            return this;
        }

        public bool HasStopLossPrice
        {
            get { return result.hasStopLossPrice; }
        }
        public double StopLossPrice
        {
            get { return result.StopLossPrice; }
            set { SetStopLossPrice(value); }
        }
        public Builder SetStopLossPrice(double value)
        {
            PrepareBuilder();
            result.hasStopLossPrice = true;
            result.stopLossPrice_ = value;
            return this;
        }
        public Builder ClearStopLossPrice()
        {
            PrepareBuilder();
            result.hasStopLossPrice = false;
            result.stopLossPrice_ = 0D;
            return this;
        }

        public bool HasTakeProfitPrice
        {
            get { return result.hasTakeProfitPrice; }
        }
        public double TakeProfitPrice
        {
            get { return result.TakeProfitPrice; }
            set { SetTakeProfitPrice(value); }
        }
        public Builder SetTakeProfitPrice(double value)
        {
            PrepareBuilder();
            result.hasTakeProfitPrice = true;
            result.takeProfitPrice_ = value;
            return this;
        }
        public Builder ClearTakeProfitPrice()
        {
            PrepareBuilder();
            result.hasTakeProfitPrice = false;
            result.takeProfitPrice_ = 0D;
            return this;
        }

        public bool HasChannel
        {
            get { return result.hasChannel; }
        }
        public string Channel
        {
            get { return result.Channel; }
            set { SetChannel(value); }
        }
        public Builder SetChannel(string value)
        {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasChannel = true;
            result.channel_ = value;
            return this;
        }
        public Builder ClearChannel()
        {
            PrepareBuilder();
            result.hasChannel = false;
            result.channel_ = "";
            return this;
        }

        public bool HasComment
        {
            get { return result.hasComment; }
        }
        public string Comment
        {
            get { return result.Comment; }
            set { SetComment(value); }
        }
        public Builder SetComment(string value)
        {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasComment = true;
            result.comment_ = value;
            return this;
        }
        public Builder ClearComment()
        {
            PrepareBuilder();
            result.hasComment = false;
            result.comment_ = "";
            return this;
        }
    }
    static ProtoOAPosition()
    {
        object.ReferenceEquals(global::OpenApiModelMessages.Descriptor, null);
    }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class ProtoOAClosePositionDetails : pb::GeneratedMessage<ProtoOAClosePositionDetails, ProtoOAClosePositionDetails.Builder>
{
    private ProtoOAClosePositionDetails() { }
    private static readonly ProtoOAClosePositionDetails defaultInstance = new ProtoOAClosePositionDetails().MakeReadOnly();
    private static readonly string[] _protoOAClosePositionDetailsFieldNames = new string[] { "balance", "closedByStopOut", "closedVolume", "comment", "commission", "entryPrice", "profit", "quoteToDepositConversionRate", "stopLossPrice", "swap", "takeProfitPrice" };
    private static readonly uint[] _protoOAClosePositionDetailsFieldTags = new uint[] { 40, 88, 80, 50, 32, 9, 16, 73, 57, 24, 65 };
    public static ProtoOAClosePositionDetails DefaultInstance
    {
        get { return defaultInstance; }
    }

    public override ProtoOAClosePositionDetails DefaultInstanceForType
    {
        get { return DefaultInstance; }
    }

    protected override ProtoOAClosePositionDetails ThisMessage
    {
        get { return this; }
    }

    public static pbd::MessageDescriptor Descriptor
    {
        get { return global::OpenApiModelMessages.internal__static_ProtoOAClosePositionDetails__Descriptor; }
    }

    protected override pb::FieldAccess.FieldAccessorTable<ProtoOAClosePositionDetails, ProtoOAClosePositionDetails.Builder> InternalFieldAccessors
    {
        get { return global::OpenApiModelMessages.internal__static_ProtoOAClosePositionDetails__FieldAccessorTable; }
    }

    public const int EntryPriceFieldNumber = 1;
    private bool hasEntryPrice;
    private double entryPrice_;
    public bool HasEntryPrice
    {
        get { return hasEntryPrice; }
    }
    public double EntryPrice
    {
        get { return entryPrice_; }
    }

    public const int ProfitFieldNumber = 2;
    private bool hasProfit;
    private long profit_;
    public bool HasProfit
    {
        get { return hasProfit; }
    }
    public long Profit
    {
        get { return profit_; }
    }

    public const int SwapFieldNumber = 3;
    private bool hasSwap;
    private long swap_;
    public bool HasSwap
    {
        get { return hasSwap; }
    }
    public long Swap
    {
        get { return swap_; }
    }

    public const int CommissionFieldNumber = 4;
    private bool hasCommission;
    private long commission_;
    public bool HasCommission
    {
        get { return hasCommission; }
    }
    public long Commission
    {
        get { return commission_; }
    }

    public const int BalanceFieldNumber = 5;
    private bool hasBalance;
    private long balance_;
    public bool HasBalance
    {
        get { return hasBalance; }
    }
    public long Balance
    {
        get { return balance_; }
    }

    public const int CommentFieldNumber = 6;
    private bool hasComment;
    private string comment_ = "";
    public bool HasComment
    {
        get { return hasComment; }
    }
    public string Comment
    {
        get { return comment_; }
    }

    public const int StopLossPriceFieldNumber = 7;
    private bool hasStopLossPrice;
    private double stopLossPrice_;
    public bool HasStopLossPrice
    {
        get { return hasStopLossPrice; }
    }
    public double StopLossPrice
    {
        get { return stopLossPrice_; }
    }

    public const int TakeProfitPriceFieldNumber = 8;
    private bool hasTakeProfitPrice;
    private double takeProfitPrice_;
    public bool HasTakeProfitPrice
    {
        get { return hasTakeProfitPrice; }
    }
    public double TakeProfitPrice
    {
        get { return takeProfitPrice_; }
    }

    public const int QuoteToDepositConversionRateFieldNumber = 9;
    private bool hasQuoteToDepositConversionRate;
    private double quoteToDepositConversionRate_;
    public bool HasQuoteToDepositConversionRate
    {
        get { return hasQuoteToDepositConversionRate; }
    }
    public double QuoteToDepositConversionRate
    {
        get { return quoteToDepositConversionRate_; }
    }

    public const int ClosedVolumeFieldNumber = 10;
    private bool hasClosedVolume;
    private long closedVolume_;
    public bool HasClosedVolume
    {
        get { return hasClosedVolume; }
    }
    public long ClosedVolume
    {
        get { return closedVolume_; }
    }

    public const int ClosedByStopOutFieldNumber = 11;
    private bool hasClosedByStopOut;
    private bool closedByStopOut_;
    [global::System.ObsoleteAttribute()]
    public bool HasClosedByStopOut
    {
        get { return hasClosedByStopOut; }
    }
    [global::System.ObsoleteAttribute()]
    public bool ClosedByStopOut
    {
        get { return closedByStopOut_; }
    }

    public override bool IsInitialized
    {
        get
        {
            if (!hasEntryPrice) return false;
            if (!hasProfit) return false;
            if (!hasSwap) return false;
            if (!hasCommission) return false;
            if (!hasBalance) return false;
            if (!hasClosedVolume) return false;
            return true;
        }
    }

    public override void WriteTo(pb::ICodedOutputStream output)
    {
        CalcSerializedSize();
        string[] field_names = _protoOAClosePositionDetailsFieldNames;
        if (hasEntryPrice)
        {
            output.WriteDouble(1, field_names[5], EntryPrice);
        }
        if (hasProfit)
        {
            output.WriteInt64(2, field_names[6], Profit);
        }
        if (hasSwap)
        {
            output.WriteInt64(3, field_names[9], Swap);
        }
        if (hasCommission)
        {
            output.WriteInt64(4, field_names[4], Commission);
        }
        if (hasBalance)
        {
            output.WriteInt64(5, field_names[0], Balance);
        }
        if (hasComment)
        {
            output.WriteString(6, field_names[3], Comment);
        }
        if (hasStopLossPrice)
        {
            output.WriteDouble(7, field_names[8], StopLossPrice);
        }
        if (hasTakeProfitPrice)
        {
            output.WriteDouble(8, field_names[10], TakeProfitPrice);
        }
        if (hasQuoteToDepositConversionRate)
        {
            output.WriteDouble(9, field_names[7], QuoteToDepositConversionRate);
        }
        if (hasClosedVolume)
        {
            output.WriteInt64(10, field_names[2], ClosedVolume);
        }
        if (hasClosedByStopOut)
        {
            output.WriteBool(11, field_names[1], ClosedByStopOut);
        }
        UnknownFields.WriteTo(output);
    }

    private int memoizedSerializedSize = -1;
    public override int SerializedSize
    {
        get
        {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            return CalcSerializedSize();
        }
    }

    private int CalcSerializedSize()
    {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (hasEntryPrice)
        {
            size += pb::CodedOutputStream.ComputeDoubleSize(1, EntryPrice);
        }
        if (hasProfit)
        {
            size += pb::CodedOutputStream.ComputeInt64Size(2, Profit);
        }
        if (hasSwap)
        {
            size += pb::CodedOutputStream.ComputeInt64Size(3, Swap);
        }
        if (hasCommission)
        {
            size += pb::CodedOutputStream.ComputeInt64Size(4, Commission);
        }
        if (hasBalance)
        {
            size += pb::CodedOutputStream.ComputeInt64Size(5, Balance);
        }
        if (hasComment)
        {
            size += pb::CodedOutputStream.ComputeStringSize(6, Comment);
        }
        if (hasStopLossPrice)
        {
            size += pb::CodedOutputStream.ComputeDoubleSize(7, StopLossPrice);
        }
        if (hasTakeProfitPrice)
        {
            size += pb::CodedOutputStream.ComputeDoubleSize(8, TakeProfitPrice);
        }
        if (hasQuoteToDepositConversionRate)
        {
            size += pb::CodedOutputStream.ComputeDoubleSize(9, QuoteToDepositConversionRate);
        }
        if (hasClosedVolume)
        {
            size += pb::CodedOutputStream.ComputeInt64Size(10, ClosedVolume);
        }
        if (hasClosedByStopOut)
        {
            size += pb::CodedOutputStream.ComputeBoolSize(11, ClosedByStopOut);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
    }
    public static ProtoOAClosePositionDetails ParseFrom(pb::ByteString data)
    {
        return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ProtoOAClosePositionDetails ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry)
    {
        return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ProtoOAClosePositionDetails ParseFrom(byte[] data)
    {
        return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ProtoOAClosePositionDetails ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry)
    {
        return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ProtoOAClosePositionDetails ParseFrom(global::System.IO.Stream input)
    {
        return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ProtoOAClosePositionDetails ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
    {
        return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ProtoOAClosePositionDetails ParseDelimitedFrom(global::System.IO.Stream input)
    {
        return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ProtoOAClosePositionDetails ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
    {
        return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ProtoOAClosePositionDetails ParseFrom(pb::ICodedInputStream input)
    {
        return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ProtoOAClosePositionDetails ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
    {
        return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ProtoOAClosePositionDetails MakeReadOnly()
    {
        return this;
    }

    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ProtoOAClosePositionDetails prototype)
    {
        return new Builder(prototype);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<ProtoOAClosePositionDetails, Builder>
    {
        protected override Builder ThisBuilder
        {
            get { return this; }
        }
        public Builder()
        {
            result = DefaultInstance;
            resultIsReadOnly = true;
        }
        internal Builder(ProtoOAClosePositionDetails cloneFrom)
        {
            result = cloneFrom;
            resultIsReadOnly = true;
        }

        private bool resultIsReadOnly;
        private ProtoOAClosePositionDetails result;

        private ProtoOAClosePositionDetails PrepareBuilder()
        {
            if (resultIsReadOnly)
            {
                ProtoOAClosePositionDetails original = result;
                result = new ProtoOAClosePositionDetails();
                resultIsReadOnly = false;
                MergeFrom(original);
            }
            return result;
        }

        public override bool IsInitialized
        {
            get { return result.IsInitialized; }
        }

        protected override ProtoOAClosePositionDetails MessageBeingBuilt
        {
            get { return PrepareBuilder(); }
        }

        public override Builder Clear()
        {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
        }

        public override Builder Clone()
        {
            if (resultIsReadOnly)
            {
                return new Builder(result);
            }
            else
            {
                return new Builder().MergeFrom(result);
            }
        }

        public override pbd::MessageDescriptor DescriptorForType
        {
            get { return global::ProtoOAClosePositionDetails.Descriptor; }
        }

        public override ProtoOAClosePositionDetails DefaultInstanceForType
        {
            get { return global::ProtoOAClosePositionDetails.DefaultInstance; }
        }

        public override ProtoOAClosePositionDetails BuildPartial()
        {
            if (resultIsReadOnly)
            {
                return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
        }

        public override Builder MergeFrom(pb::IMessage other)
        {
            if (other is ProtoOAClosePositionDetails)
            {
                return MergeFrom((ProtoOAClosePositionDetails)other);
            }
            else
            {
                base.MergeFrom(other);
                return this;
            }
        }

        public override Builder MergeFrom(ProtoOAClosePositionDetails other)
        {
            if (other == global::ProtoOAClosePositionDetails.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasEntryPrice)
            {
                EntryPrice = other.EntryPrice;
            }
            if (other.HasProfit)
            {
                Profit = other.Profit;
            }
            if (other.HasSwap)
            {
                Swap = other.Swap;
            }
            if (other.HasCommission)
            {
                Commission = other.Commission;
            }
            if (other.HasBalance)
            {
                Balance = other.Balance;
            }
            if (other.HasComment)
            {
                Comment = other.Comment;
            }
            if (other.HasStopLossPrice)
            {
                StopLossPrice = other.StopLossPrice;
            }
            if (other.HasTakeProfitPrice)
            {
                TakeProfitPrice = other.TakeProfitPrice;
            }
            if (other.HasQuoteToDepositConversionRate)
            {
                QuoteToDepositConversionRate = other.QuoteToDepositConversionRate;
            }
            if (other.HasClosedVolume)
            {
                ClosedVolume = other.ClosedVolume;
            }
            if (other.HasClosedByStopOut)
            {
                ClosedByStopOut = other.ClosedByStopOut;
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
        }

        public override Builder MergeFrom(pb::ICodedInputStream input)
        {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
        }

        public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
        {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name))
            {
                if (tag == 0 && field_name != null)
                {
                    int field_ordinal = global::System.Array.BinarySearch(_protoOAClosePositionDetailsFieldNames, field_name, global::System.StringComparer.Ordinal);
                    if (field_ordinal >= 0)
                        tag = _protoOAClosePositionDetailsFieldTags[field_ordinal];
                    else
                    {
                        if (unknownFields == null)
                        {
                            unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                        }
                        ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                        continue;
                    }
                }
                switch (tag)
                {
                    case 0:
                        {
                            throw pb::InvalidProtocolBufferException.InvalidTag();
                        }
                    default:
                        {
                            if (pb::WireFormat.IsEndGroupTag(tag))
                            {
                                if (unknownFields != null)
                                {
                                    this.UnknownFields = unknownFields.Build();
                                }
                                return this;
                            }
                            if (unknownFields == null)
                            {
                                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                            }
                            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                            break;
                        }
                    case 9:
                        {
                            result.hasEntryPrice = input.ReadDouble(ref result.entryPrice_);
                            break;
                        }
                    case 16:
                        {
                            result.hasProfit = input.ReadInt64(ref result.profit_);
                            break;
                        }
                    case 24:
                        {
                            result.hasSwap = input.ReadInt64(ref result.swap_);
                            break;
                        }
                    case 32:
                        {
                            result.hasCommission = input.ReadInt64(ref result.commission_);
                            break;
                        }
                    case 40:
                        {
                            result.hasBalance = input.ReadInt64(ref result.balance_);
                            break;
                        }
                    case 50:
                        {
                            result.hasComment = input.ReadString(ref result.comment_);
                            break;
                        }
                    case 57:
                        {
                            result.hasStopLossPrice = input.ReadDouble(ref result.stopLossPrice_);
                            break;
                        }
                    case 65:
                        {
                            result.hasTakeProfitPrice = input.ReadDouble(ref result.takeProfitPrice_);
                            break;
                        }
                    case 73:
                        {
                            result.hasQuoteToDepositConversionRate = input.ReadDouble(ref result.quoteToDepositConversionRate_);
                            break;
                        }
                    case 80:
                        {
                            result.hasClosedVolume = input.ReadInt64(ref result.closedVolume_);
                            break;
                        }
                    case 88:
                        {
                            result.hasClosedByStopOut = input.ReadBool(ref result.closedByStopOut_);
                            break;
                        }
                }
            }

            if (unknownFields != null)
            {
                this.UnknownFields = unknownFields.Build();
            }
            return this;
        }


        public bool HasEntryPrice
        {
            get { return result.hasEntryPrice; }
        }
        public double EntryPrice
        {
            get { return result.EntryPrice; }
            set { SetEntryPrice(value); }
        }
        public Builder SetEntryPrice(double value)
        {
            PrepareBuilder();
            result.hasEntryPrice = true;
            result.entryPrice_ = value;
            return this;
        }
        public Builder ClearEntryPrice()
        {
            PrepareBuilder();
            result.hasEntryPrice = false;
            result.entryPrice_ = 0D;
            return this;
        }

        public bool HasProfit
        {
            get { return result.hasProfit; }
        }
        public long Profit
        {
            get { return result.Profit; }
            set { SetProfit(value); }
        }
        public Builder SetProfit(long value)
        {
            PrepareBuilder();
            result.hasProfit = true;
            result.profit_ = value;
            return this;
        }
        public Builder ClearProfit()
        {
            PrepareBuilder();
            result.hasProfit = false;
            result.profit_ = 0L;
            return this;
        }

        public bool HasSwap
        {
            get { return result.hasSwap; }
        }
        public long Swap
        {
            get { return result.Swap; }
            set { SetSwap(value); }
        }
        public Builder SetSwap(long value)
        {
            PrepareBuilder();
            result.hasSwap = true;
            result.swap_ = value;
            return this;
        }
        public Builder ClearSwap()
        {
            PrepareBuilder();
            result.hasSwap = false;
            result.swap_ = 0L;
            return this;
        }

        public bool HasCommission
        {
            get { return result.hasCommission; }
        }
        public long Commission
        {
            get { return result.Commission; }
            set { SetCommission(value); }
        }
        public Builder SetCommission(long value)
        {
            PrepareBuilder();
            result.hasCommission = true;
            result.commission_ = value;
            return this;
        }
        public Builder ClearCommission()
        {
            PrepareBuilder();
            result.hasCommission = false;
            result.commission_ = 0L;
            return this;
        }

        public bool HasBalance
        {
            get { return result.hasBalance; }
        }
        public long Balance
        {
            get { return result.Balance; }
            set { SetBalance(value); }
        }
        public Builder SetBalance(long value)
        {
            PrepareBuilder();
            result.hasBalance = true;
            result.balance_ = value;
            return this;
        }
        public Builder ClearBalance()
        {
            PrepareBuilder();
            result.hasBalance = false;
            result.balance_ = 0L;
            return this;
        }

        public bool HasComment
        {
            get { return result.hasComment; }
        }
        public string Comment
        {
            get { return result.Comment; }
            set { SetComment(value); }
        }
        public Builder SetComment(string value)
        {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasComment = true;
            result.comment_ = value;
            return this;
        }
        public Builder ClearComment()
        {
            PrepareBuilder();
            result.hasComment = false;
            result.comment_ = "";
            return this;
        }

        public bool HasStopLossPrice
        {
            get { return result.hasStopLossPrice; }
        }
        public double StopLossPrice
        {
            get { return result.StopLossPrice; }
            set { SetStopLossPrice(value); }
        }
        public Builder SetStopLossPrice(double value)
        {
            PrepareBuilder();
            result.hasStopLossPrice = true;
            result.stopLossPrice_ = value;
            return this;
        }
        public Builder ClearStopLossPrice()
        {
            PrepareBuilder();
            result.hasStopLossPrice = false;
            result.stopLossPrice_ = 0D;
            return this;
        }

        public bool HasTakeProfitPrice
        {
            get { return result.hasTakeProfitPrice; }
        }
        public double TakeProfitPrice
        {
            get { return result.TakeProfitPrice; }
            set { SetTakeProfitPrice(value); }
        }
        public Builder SetTakeProfitPrice(double value)
        {
            PrepareBuilder();
            result.hasTakeProfitPrice = true;
            result.takeProfitPrice_ = value;
            return this;
        }
        public Builder ClearTakeProfitPrice()
        {
            PrepareBuilder();
            result.hasTakeProfitPrice = false;
            result.takeProfitPrice_ = 0D;
            return this;
        }

        public bool HasQuoteToDepositConversionRate
        {
            get { return result.hasQuoteToDepositConversionRate; }
        }
        public double QuoteToDepositConversionRate
        {
            get { return result.QuoteToDepositConversionRate; }
            set { SetQuoteToDepositConversionRate(value); }
        }
        public Builder SetQuoteToDepositConversionRate(double value)
        {
            PrepareBuilder();
            result.hasQuoteToDepositConversionRate = true;
            result.quoteToDepositConversionRate_ = value;
            return this;
        }
        public Builder ClearQuoteToDepositConversionRate()
        {
            PrepareBuilder();
            result.hasQuoteToDepositConversionRate = false;
            result.quoteToDepositConversionRate_ = 0D;
            return this;
        }

        public bool HasClosedVolume
        {
            get { return result.hasClosedVolume; }
        }
        public long ClosedVolume
        {
            get { return result.ClosedVolume; }
            set { SetClosedVolume(value); }
        }
        public Builder SetClosedVolume(long value)
        {
            PrepareBuilder();
            result.hasClosedVolume = true;
            result.closedVolume_ = value;
            return this;
        }
        public Builder ClearClosedVolume()
        {
            PrepareBuilder();
            result.hasClosedVolume = false;
            result.closedVolume_ = 0L;
            return this;
        }

        [global::System.ObsoleteAttribute()]
        public bool HasClosedByStopOut
        {
            get { return result.hasClosedByStopOut; }
        }
        [global::System.ObsoleteAttribute()]
        public bool ClosedByStopOut
        {
            get { return result.ClosedByStopOut; }
            set { SetClosedByStopOut(value); }
        }
        [global::System.ObsoleteAttribute()]
        public Builder SetClosedByStopOut(bool value)
        {
            PrepareBuilder();
            result.hasClosedByStopOut = true;
            result.closedByStopOut_ = value;
            return this;
        }
        [global::System.ObsoleteAttribute()]
        public Builder ClearClosedByStopOut()
        {
            PrepareBuilder();
            result.hasClosedByStopOut = false;
            result.closedByStopOut_ = false;
            return this;
        }
    }
    static ProtoOAClosePositionDetails()
    {
        object.ReferenceEquals(global::OpenApiModelMessages.Descriptor, null);
    }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class ProtoOASpotSubscription : pb::GeneratedMessage<ProtoOASpotSubscription, ProtoOASpotSubscription.Builder>
{
    private ProtoOASpotSubscription() { }
    private static readonly ProtoOASpotSubscription defaultInstance = new ProtoOASpotSubscription().MakeReadOnly();
    private static readonly string[] _protoOASpotSubscriptionFieldNames = new string[] { "accountId", "subscribedSymbols", "subscriptionId", "symbolNames" };
    private static readonly uint[] _protoOASpotSubscriptionFieldTags = new uint[] { 8, 34, 16, 26 };
    public static ProtoOASpotSubscription DefaultInstance
    {
        get { return defaultInstance; }
    }

    public override ProtoOASpotSubscription DefaultInstanceForType
    {
        get { return DefaultInstance; }
    }

    protected override ProtoOASpotSubscription ThisMessage
    {
        get { return this; }
    }

    public static pbd::MessageDescriptor Descriptor
    {
        get { return global::OpenApiModelMessages.internal__static_ProtoOASpotSubscription__Descriptor; }
    }

    protected override pb::FieldAccess.FieldAccessorTable<ProtoOASpotSubscription, ProtoOASpotSubscription.Builder> InternalFieldAccessors
    {
        get { return global::OpenApiModelMessages.internal__static_ProtoOASpotSubscription__FieldAccessorTable; }
    }

    public const int AccountIdFieldNumber = 1;
    private bool hasAccountId;
    private long accountId_;
    public bool HasAccountId
    {
        get { return hasAccountId; }
    }
    public long AccountId
    {
        get { return accountId_; }
    }

    public const int SubscriptionIdFieldNumber = 2;
    private bool hasSubscriptionId;
    private uint subscriptionId_;
    public bool HasSubscriptionId
    {
        get { return hasSubscriptionId; }
    }
    [global::System.CLSCompliant(false)]
    public uint SubscriptionId
    {
        get { return subscriptionId_; }
    }

    public const int SymbolNamesFieldNumber = 3;
    private pbc::PopsicleList<string> symbolNames_ = new pbc::PopsicleList<string>();
    [global::System.ObsoleteAttribute()]
    public scg::IList<string> SymbolNamesList
    {
        get { return pbc::Lists.AsReadOnly(symbolNames_); }
    }
    [global::System.ObsoleteAttribute()]
    public int SymbolNamesCount
    {
        get { return symbolNames_.Count; }
    }
    [global::System.ObsoleteAttribute()]
    public string GetSymbolNames(int index)
    {
        return symbolNames_[index];
    }

    public const int SubscribedSymbolsFieldNumber = 4;
    private pbc::PopsicleList<global::ProtoOASubscribedSpotSymbol> subscribedSymbols_ = new pbc::PopsicleList<global::ProtoOASubscribedSpotSymbol>();
    public scg::IList<global::ProtoOASubscribedSpotSymbol> SubscribedSymbolsList
    {
        get { return subscribedSymbols_; }
    }
    public int SubscribedSymbolsCount
    {
        get { return subscribedSymbols_.Count; }
    }
    public global::ProtoOASubscribedSpotSymbol GetSubscribedSymbols(int index)
    {
        return subscribedSymbols_[index];
    }

    public override bool IsInitialized
    {
        get
        {
            if (!hasAccountId) return false;
            if (!hasSubscriptionId) return false;
            foreach (global::ProtoOASubscribedSpotSymbol element in SubscribedSymbolsList)
            {
                if (!element.IsInitialized) return false;
            }
            return true;
        }
    }

    public override void WriteTo(pb::ICodedOutputStream output)
    {
        CalcSerializedSize();
        string[] field_names = _protoOASpotSubscriptionFieldNames;
        if (hasAccountId)
        {
            output.WriteInt64(1, field_names[0], AccountId);
        }
        if (hasSubscriptionId)
        {
            output.WriteUInt32(2, field_names[2], SubscriptionId);
        }
        if (symbolNames_.Count > 0)
        {
            output.WriteStringArray(3, field_names[3], symbolNames_);
        }
        if (subscribedSymbols_.Count > 0)
        {
            output.WriteMessageArray(4, field_names[1], subscribedSymbols_);
        }
        UnknownFields.WriteTo(output);
    }

    private int memoizedSerializedSize = -1;
    public override int SerializedSize
    {
        get
        {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            return CalcSerializedSize();
        }
    }

    private int CalcSerializedSize()
    {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (hasAccountId)
        {
            size += pb::CodedOutputStream.ComputeInt64Size(1, AccountId);
        }
        if (hasSubscriptionId)
        {
            size += pb::CodedOutputStream.ComputeUInt32Size(2, SubscriptionId);
        }
        {
            int dataSize = 0;
            foreach (string element in SymbolNamesList)
            {
                dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
            }
            size += dataSize;
            size += 1 * symbolNames_.Count;
        }
        foreach (global::ProtoOASubscribedSpotSymbol element in SubscribedSymbolsList)
        {
            size += pb::CodedOutputStream.ComputeMessageSize(4, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
    }
    public static ProtoOASpotSubscription ParseFrom(pb::ByteString data)
    {
        return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ProtoOASpotSubscription ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry)
    {
        return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ProtoOASpotSubscription ParseFrom(byte[] data)
    {
        return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ProtoOASpotSubscription ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry)
    {
        return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ProtoOASpotSubscription ParseFrom(global::System.IO.Stream input)
    {
        return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ProtoOASpotSubscription ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
    {
        return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ProtoOASpotSubscription ParseDelimitedFrom(global::System.IO.Stream input)
    {
        return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ProtoOASpotSubscription ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
    {
        return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ProtoOASpotSubscription ParseFrom(pb::ICodedInputStream input)
    {
        return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ProtoOASpotSubscription ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
    {
        return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ProtoOASpotSubscription MakeReadOnly()
    {
        symbolNames_.MakeReadOnly();
        subscribedSymbols_.MakeReadOnly();
        return this;
    }

    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ProtoOASpotSubscription prototype)
    {
        return new Builder(prototype);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<ProtoOASpotSubscription, Builder>
    {
        protected override Builder ThisBuilder
        {
            get { return this; }
        }
        public Builder()
        {
            result = DefaultInstance;
            resultIsReadOnly = true;
        }
        internal Builder(ProtoOASpotSubscription cloneFrom)
        {
            result = cloneFrom;
            resultIsReadOnly = true;
        }

        private bool resultIsReadOnly;
        private ProtoOASpotSubscription result;

        private ProtoOASpotSubscription PrepareBuilder()
        {
            if (resultIsReadOnly)
            {
                ProtoOASpotSubscription original = result;
                result = new ProtoOASpotSubscription();
                resultIsReadOnly = false;
                MergeFrom(original);
            }
            return result;
        }

        public override bool IsInitialized
        {
            get { return result.IsInitialized; }
        }

        protected override ProtoOASpotSubscription MessageBeingBuilt
        {
            get { return PrepareBuilder(); }
        }

        public override Builder Clear()
        {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
        }

        public override Builder Clone()
        {
            if (resultIsReadOnly)
            {
                return new Builder(result);
            }
            else
            {
                return new Builder().MergeFrom(result);
            }
        }

        public override pbd::MessageDescriptor DescriptorForType
        {
            get { return global::ProtoOASpotSubscription.Descriptor; }
        }

        public override ProtoOASpotSubscription DefaultInstanceForType
        {
            get { return global::ProtoOASpotSubscription.DefaultInstance; }
        }

        public override ProtoOASpotSubscription BuildPartial()
        {
            if (resultIsReadOnly)
            {
                return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
        }

        public override Builder MergeFrom(pb::IMessage other)
        {
            if (other is ProtoOASpotSubscription)
            {
                return MergeFrom((ProtoOASpotSubscription)other);
            }
            else
            {
                base.MergeFrom(other);
                return this;
            }
        }

        public override Builder MergeFrom(ProtoOASpotSubscription other)
        {
            if (other == global::ProtoOASpotSubscription.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasAccountId)
            {
                AccountId = other.AccountId;
            }
            if (other.HasSubscriptionId)
            {
                SubscriptionId = other.SubscriptionId;
            }
            if (other.symbolNames_.Count != 0)
            {
                result.symbolNames_.Add(other.symbolNames_);
            }
            if (other.subscribedSymbols_.Count != 0)
            {
                result.subscribedSymbols_.Add(other.subscribedSymbols_);
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
        }

        public override Builder MergeFrom(pb::ICodedInputStream input)
        {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
        }

        public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
        {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name))
            {
                if (tag == 0 && field_name != null)
                {
                    int field_ordinal = global::System.Array.BinarySearch(_protoOASpotSubscriptionFieldNames, field_name, global::System.StringComparer.Ordinal);
                    if (field_ordinal >= 0)
                        tag = _protoOASpotSubscriptionFieldTags[field_ordinal];
                    else
                    {
                        if (unknownFields == null)
                        {
                            unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                        }
                        ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                        continue;
                    }
                }
                switch (tag)
                {
                    case 0:
                        {
                            throw pb::InvalidProtocolBufferException.InvalidTag();
                        }
                    default:
                        {
                            if (pb::WireFormat.IsEndGroupTag(tag))
                            {
                                if (unknownFields != null)
                                {
                                    this.UnknownFields = unknownFields.Build();
                                }
                                return this;
                            }
                            if (unknownFields == null)
                            {
                                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                            }
                            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                            break;
                        }
                    case 8:
                        {
                            result.hasAccountId = input.ReadInt64(ref result.accountId_);
                            break;
                        }
                    case 16:
                        {
                            result.hasSubscriptionId = input.ReadUInt32(ref result.subscriptionId_);
                            break;
                        }
                    case 26:
                        {
                            input.ReadStringArray(tag, field_name, result.symbolNames_);
                            break;
                        }
                    case 34:
                        {
                            input.ReadMessageArray(tag, field_name, result.subscribedSymbols_, global::ProtoOASubscribedSpotSymbol.DefaultInstance, extensionRegistry);
                            break;
                        }
                }
            }

            if (unknownFields != null)
            {
                this.UnknownFields = unknownFields.Build();
            }
            return this;
        }


        public bool HasAccountId
        {
            get { return result.hasAccountId; }
        }
        public long AccountId
        {
            get { return result.AccountId; }
            set { SetAccountId(value); }
        }
        public Builder SetAccountId(long value)
        {
            PrepareBuilder();
            result.hasAccountId = true;
            result.accountId_ = value;
            return this;
        }
        public Builder ClearAccountId()
        {
            PrepareBuilder();
            result.hasAccountId = false;
            result.accountId_ = 0L;
            return this;
        }

        public bool HasSubscriptionId
        {
            get { return result.hasSubscriptionId; }
        }
        [global::System.CLSCompliant(false)]
        public uint SubscriptionId
        {
            get { return result.SubscriptionId; }
            set { SetSubscriptionId(value); }
        }
        [global::System.CLSCompliant(false)]
        public Builder SetSubscriptionId(uint value)
        {
            PrepareBuilder();
            result.hasSubscriptionId = true;
            result.subscriptionId_ = value;
            return this;
        }
        public Builder ClearSubscriptionId()
        {
            PrepareBuilder();
            result.hasSubscriptionId = false;
            result.subscriptionId_ = 0;
            return this;
        }

        [global::System.ObsoleteAttribute()]
        public pbc::IPopsicleList<string> SymbolNamesList
        {
            get { return PrepareBuilder().symbolNames_; }
        }
        [global::System.ObsoleteAttribute()]
        public int SymbolNamesCount
        {
            get { return result.SymbolNamesCount; }
        }
        [global::System.ObsoleteAttribute()]
        public string GetSymbolNames(int index)
        {
            return result.GetSymbolNames(index);
        }
        [global::System.ObsoleteAttribute()]
        public Builder SetSymbolNames(int index, string value)
        {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.symbolNames_[index] = value;
            return this;
        }
        [global::System.ObsoleteAttribute()]
        public Builder AddSymbolNames(string value)
        {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.symbolNames_.Add(value);
            return this;
        }
        [global::System.ObsoleteAttribute()]
        public Builder AddRangeSymbolNames(scg::IEnumerable<string> values)
        {
            PrepareBuilder();
            result.symbolNames_.Add(values);
            return this;
        }
        [global::System.ObsoleteAttribute()]
        public Builder ClearSymbolNames()
        {
            PrepareBuilder();
            result.symbolNames_.Clear();
            return this;
        }

        public pbc::IPopsicleList<global::ProtoOASubscribedSpotSymbol> SubscribedSymbolsList
        {
            get { return PrepareBuilder().subscribedSymbols_; }
        }
        public int SubscribedSymbolsCount
        {
            get { return result.SubscribedSymbolsCount; }
        }
        public global::ProtoOASubscribedSpotSymbol GetSubscribedSymbols(int index)
        {
            return result.GetSubscribedSymbols(index);
        }
        public Builder SetSubscribedSymbols(int index, global::ProtoOASubscribedSpotSymbol value)
        {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.subscribedSymbols_[index] = value;
            return this;
        }
        public Builder SetSubscribedSymbols(int index, global::ProtoOASubscribedSpotSymbol.Builder builderForValue)
        {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.subscribedSymbols_[index] = builderForValue.Build();
            return this;
        }
        public Builder AddSubscribedSymbols(global::ProtoOASubscribedSpotSymbol value)
        {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.subscribedSymbols_.Add(value);
            return this;
        }
        public Builder AddSubscribedSymbols(global::ProtoOASubscribedSpotSymbol.Builder builderForValue)
        {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.subscribedSymbols_.Add(builderForValue.Build());
            return this;
        }
        public Builder AddRangeSubscribedSymbols(scg::IEnumerable<global::ProtoOASubscribedSpotSymbol> values)
        {
            PrepareBuilder();
            result.subscribedSymbols_.Add(values);
            return this;
        }
        public Builder ClearSubscribedSymbols()
        {
            PrepareBuilder();
            result.subscribedSymbols_.Clear();
            return this;
        }
    }
    static ProtoOASpotSubscription()
    {
        object.ReferenceEquals(global::OpenApiModelMessages.Descriptor, null);
    }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class ProtoOASubscribedSpotSymbol : pb::GeneratedMessage<ProtoOASubscribedSpotSymbol, ProtoOASubscribedSpotSymbol.Builder>
{
    private ProtoOASubscribedSpotSymbol() { }
    private static readonly ProtoOASubscribedSpotSymbol defaultInstance = new ProtoOASubscribedSpotSymbol().MakeReadOnly();
    private static readonly string[] _protoOASubscribedSpotSymbolFieldNames = new string[] { "period", "symbolName" };
    private static readonly uint[] _protoOASubscribedSpotSymbolFieldTags = new uint[] { 16, 10 };
    public static ProtoOASubscribedSpotSymbol DefaultInstance
    {
        get { return defaultInstance; }
    }

    public override ProtoOASubscribedSpotSymbol DefaultInstanceForType
    {
        get { return DefaultInstance; }
    }

    protected override ProtoOASubscribedSpotSymbol ThisMessage
    {
        get { return this; }
    }

    public static pbd::MessageDescriptor Descriptor
    {
        get { return global::OpenApiModelMessages.internal__static_ProtoOASubscribedSpotSymbol__Descriptor; }
    }

    protected override pb::FieldAccess.FieldAccessorTable<ProtoOASubscribedSpotSymbol, ProtoOASubscribedSpotSymbol.Builder> InternalFieldAccessors
    {
        get { return global::OpenApiModelMessages.internal__static_ProtoOASubscribedSpotSymbol__FieldAccessorTable; }
    }

    public const int SymbolNameFieldNumber = 1;
    private bool hasSymbolName;
    private string symbolName_ = "";
    public bool HasSymbolName
    {
        get { return hasSymbolName; }
    }
    public string SymbolName
    {
        get { return symbolName_; }
    }

    public const int PeriodFieldNumber = 2;
    private pbc::PopsicleList<global::ProtoOATrendbarPeriod> period_ = new pbc::PopsicleList<global::ProtoOATrendbarPeriod>();
    public scg::IList<global::ProtoOATrendbarPeriod> PeriodList
    {
        get { return pbc::Lists.AsReadOnly(period_); }
    }
    public int PeriodCount
    {
        get { return period_.Count; }
    }
    public global::ProtoOATrendbarPeriod GetPeriod(int index)
    {
        return period_[index];
    }

    public override bool IsInitialized
    {
        get
        {
            if (!hasSymbolName) return false;
            return true;
        }
    }

    public override void WriteTo(pb::ICodedOutputStream output)
    {
        CalcSerializedSize();
        string[] field_names = _protoOASubscribedSpotSymbolFieldNames;
        if (hasSymbolName)
        {
            output.WriteString(1, field_names[1], SymbolName);
        }
        if (period_.Count > 0)
        {
            output.WriteEnumArray(2, field_names[0], period_);
        }
        UnknownFields.WriteTo(output);
    }

    private int memoizedSerializedSize = -1;
    public override int SerializedSize
    {
        get
        {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            return CalcSerializedSize();
        }
    }

    private int CalcSerializedSize()
    {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (hasSymbolName)
        {
            size += pb::CodedOutputStream.ComputeStringSize(1, SymbolName);
        }
        {
            int dataSize = 0;
            if (period_.Count > 0)
            {
                foreach (global::ProtoOATrendbarPeriod element in period_)
                {
                    dataSize += pb::CodedOutputStream.ComputeEnumSizeNoTag((int)element);
                }
                size += dataSize;
                size += 1 * period_.Count;
            }
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
    }
    public static ProtoOASubscribedSpotSymbol ParseFrom(pb::ByteString data)
    {
        return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ProtoOASubscribedSpotSymbol ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry)
    {
        return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ProtoOASubscribedSpotSymbol ParseFrom(byte[] data)
    {
        return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ProtoOASubscribedSpotSymbol ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry)
    {
        return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ProtoOASubscribedSpotSymbol ParseFrom(global::System.IO.Stream input)
    {
        return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ProtoOASubscribedSpotSymbol ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
    {
        return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ProtoOASubscribedSpotSymbol ParseDelimitedFrom(global::System.IO.Stream input)
    {
        return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ProtoOASubscribedSpotSymbol ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
    {
        return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ProtoOASubscribedSpotSymbol ParseFrom(pb::ICodedInputStream input)
    {
        return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ProtoOASubscribedSpotSymbol ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
    {
        return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ProtoOASubscribedSpotSymbol MakeReadOnly()
    {
        period_.MakeReadOnly();
        return this;
    }

    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ProtoOASubscribedSpotSymbol prototype)
    {
        return new Builder(prototype);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<ProtoOASubscribedSpotSymbol, Builder>
    {
        protected override Builder ThisBuilder
        {
            get { return this; }
        }
        public Builder()
        {
            result = DefaultInstance;
            resultIsReadOnly = true;
        }
        internal Builder(ProtoOASubscribedSpotSymbol cloneFrom)
        {
            result = cloneFrom;
            resultIsReadOnly = true;
        }

        private bool resultIsReadOnly;
        private ProtoOASubscribedSpotSymbol result;

        private ProtoOASubscribedSpotSymbol PrepareBuilder()
        {
            if (resultIsReadOnly)
            {
                ProtoOASubscribedSpotSymbol original = result;
                result = new ProtoOASubscribedSpotSymbol();
                resultIsReadOnly = false;
                MergeFrom(original);
            }
            return result;
        }

        public override bool IsInitialized
        {
            get { return result.IsInitialized; }
        }

        protected override ProtoOASubscribedSpotSymbol MessageBeingBuilt
        {
            get { return PrepareBuilder(); }
        }

        public override Builder Clear()
        {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
        }

        public override Builder Clone()
        {
            if (resultIsReadOnly)
            {
                return new Builder(result);
            }
            else
            {
                return new Builder().MergeFrom(result);
            }
        }

        public override pbd::MessageDescriptor DescriptorForType
        {
            get { return global::ProtoOASubscribedSpotSymbol.Descriptor; }
        }

        public override ProtoOASubscribedSpotSymbol DefaultInstanceForType
        {
            get { return global::ProtoOASubscribedSpotSymbol.DefaultInstance; }
        }

        public override ProtoOASubscribedSpotSymbol BuildPartial()
        {
            if (resultIsReadOnly)
            {
                return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
        }

        public override Builder MergeFrom(pb::IMessage other)
        {
            if (other is ProtoOASubscribedSpotSymbol)
            {
                return MergeFrom((ProtoOASubscribedSpotSymbol)other);
            }
            else
            {
                base.MergeFrom(other);
                return this;
            }
        }

        public override Builder MergeFrom(ProtoOASubscribedSpotSymbol other)
        {
            if (other == global::ProtoOASubscribedSpotSymbol.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasSymbolName)
            {
                SymbolName = other.SymbolName;
            }
            if (other.period_.Count != 0)
            {
                result.period_.Add(other.period_);
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
        }

        public override Builder MergeFrom(pb::ICodedInputStream input)
        {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
        }

        public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
        {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name))
            {
                if (tag == 0 && field_name != null)
                {
                    int field_ordinal = global::System.Array.BinarySearch(_protoOASubscribedSpotSymbolFieldNames, field_name, global::System.StringComparer.Ordinal);
                    if (field_ordinal >= 0)
                        tag = _protoOASubscribedSpotSymbolFieldTags[field_ordinal];
                    else
                    {
                        if (unknownFields == null)
                        {
                            unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                        }
                        ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                        continue;
                    }
                }
                switch (tag)
                {
                    case 0:
                        {
                            throw pb::InvalidProtocolBufferException.InvalidTag();
                        }
                    default:
                        {
                            if (pb::WireFormat.IsEndGroupTag(tag))
                            {
                                if (unknownFields != null)
                                {
                                    this.UnknownFields = unknownFields.Build();
                                }
                                return this;
                            }
                            if (unknownFields == null)
                            {
                                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                            }
                            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                            break;
                        }
                    case 10:
                        {
                            result.hasSymbolName = input.ReadString(ref result.symbolName_);
                            break;
                        }
                    case 18:
                    case 16:
                        {
                            scg::ICollection<object> unknownItems;
                            input.ReadEnumArray<global::ProtoOATrendbarPeriod>(tag, field_name, result.period_, out unknownItems);
                            if (unknownItems != null)
                            {
                                if (unknownFields == null)
                                {
                                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                                }
                                foreach (object rawValue in unknownItems)
                                    if (rawValue is int)
                                        unknownFields.MergeVarintField(2, (ulong)(int)rawValue);
                            }
                            break;
                        }
                }
            }

            if (unknownFields != null)
            {
                this.UnknownFields = unknownFields.Build();
            }
            return this;
        }


        public bool HasSymbolName
        {
            get { return result.hasSymbolName; }
        }
        public string SymbolName
        {
            get { return result.SymbolName; }
            set { SetSymbolName(value); }
        }
        public Builder SetSymbolName(string value)
        {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasSymbolName = true;
            result.symbolName_ = value;
            return this;
        }
        public Builder ClearSymbolName()
        {
            PrepareBuilder();
            result.hasSymbolName = false;
            result.symbolName_ = "";
            return this;
        }

        public pbc::IPopsicleList<global::ProtoOATrendbarPeriod> PeriodList
        {
            get { return PrepareBuilder().period_; }
        }
        public int PeriodCount
        {
            get { return result.PeriodCount; }
        }
        public global::ProtoOATrendbarPeriod GetPeriod(int index)
        {
            return result.GetPeriod(index);
        }
        public Builder SetPeriod(int index, global::ProtoOATrendbarPeriod value)
        {
            PrepareBuilder();
            result.period_[index] = value;
            return this;
        }
        public Builder AddPeriod(global::ProtoOATrendbarPeriod value)
        {
            PrepareBuilder();
            result.period_.Add(value);
            return this;
        }
        public Builder AddRangePeriod(scg::IEnumerable<global::ProtoOATrendbarPeriod> values)
        {
            PrepareBuilder();
            result.period_.Add(values);
            return this;
        }
        public Builder ClearPeriod()
        {
            PrepareBuilder();
            result.period_.Clear();
            return this;
        }
    }
    static ProtoOASubscribedSpotSymbol()
    {
        object.ReferenceEquals(global::OpenApiModelMessages.Descriptor, null);
    }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class ProtoOATrendbar : pb::GeneratedMessage<ProtoOATrendbar, ProtoOATrendbar.Builder>
{
    private ProtoOATrendbar() { }
    private static readonly ProtoOATrendbar defaultInstance = new ProtoOATrendbar().MakeReadOnly();
    private static readonly string[] _protoOATrendbarFieldNames = new string[] { "close", "high", "low", "open", "period", "utcTimestamp", "volume" };
    private static readonly uint[] _protoOATrendbarFieldTags = new uint[] { 17, 25, 33, 9, 56, 48, 40 };
    public static ProtoOATrendbar DefaultInstance
    {
        get { return defaultInstance; }
    }

    public override ProtoOATrendbar DefaultInstanceForType
    {
        get { return DefaultInstance; }
    }

    protected override ProtoOATrendbar ThisMessage
    {
        get { return this; }
    }

    public static pbd::MessageDescriptor Descriptor
    {
        get { return global::OpenApiModelMessages.internal__static_ProtoOATrendbar__Descriptor; }
    }

    protected override pb::FieldAccess.FieldAccessorTable<ProtoOATrendbar, ProtoOATrendbar.Builder> InternalFieldAccessors
    {
        get { return global::OpenApiModelMessages.internal__static_ProtoOATrendbar__FieldAccessorTable; }
    }

    public const int OpenFieldNumber = 1;
    private bool hasOpen;
    private double open_;
    public bool HasOpen
    {
        get { return hasOpen; }
    }
    public double Open
    {
        get { return open_; }
    }

    public const int CloseFieldNumber = 2;
    private bool hasClose;
    private double close_;
    public bool HasClose
    {
        get { return hasClose; }
    }
    public double Close
    {
        get { return close_; }
    }

    public const int HighFieldNumber = 3;
    private bool hasHigh;
    private double high_;
    public bool HasHigh
    {
        get { return hasHigh; }
    }
    public double High
    {
        get { return high_; }
    }

    public const int LowFieldNumber = 4;
    private bool hasLow;
    private double low_;
    public bool HasLow
    {
        get { return hasLow; }
    }
    public double Low
    {
        get { return low_; }
    }

    public const int VolumeFieldNumber = 5;
    private bool hasVolume;
    private long volume_;
    public bool HasVolume
    {
        get { return hasVolume; }
    }
    public long Volume
    {
        get { return volume_; }
    }

    public const int UtcTimestampFieldNumber = 6;
    private bool hasUtcTimestamp;
    private long utcTimestamp_;
    public bool HasUtcTimestamp
    {
        get { return hasUtcTimestamp; }
    }
    public long UtcTimestamp
    {
        get { return utcTimestamp_; }
    }

    public const int PeriodFieldNumber = 7;
    private bool hasPeriod;
    private global::ProtoOATrendbarPeriod period_ = global::ProtoOATrendbarPeriod.M1;
    public bool HasPeriod
    {
        get { return hasPeriod; }
    }
    public global::ProtoOATrendbarPeriod Period
    {
        get { return period_; }
    }

    public override bool IsInitialized
    {
        get
        {
            if (!hasVolume) return false;
            return true;
        }
    }

    public override void WriteTo(pb::ICodedOutputStream output)
    {
        CalcSerializedSize();
        string[] field_names = _protoOATrendbarFieldNames;
        if (hasOpen)
        {
            output.WriteDouble(1, field_names[3], Open);
        }
        if (hasClose)
        {
            output.WriteDouble(2, field_names[0], Close);
        }
        if (hasHigh)
        {
            output.WriteDouble(3, field_names[1], High);
        }
        if (hasLow)
        {
            output.WriteDouble(4, field_names[2], Low);
        }
        if (hasVolume)
        {
            output.WriteInt64(5, field_names[6], Volume);
        }
        if (hasUtcTimestamp)
        {
            output.WriteInt64(6, field_names[5], UtcTimestamp);
        }
        if (hasPeriod)
        {
            output.WriteEnum(7, field_names[4], (int)Period, Period);
        }
        UnknownFields.WriteTo(output);
    }

    private int memoizedSerializedSize = -1;
    public override int SerializedSize
    {
        get
        {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            return CalcSerializedSize();
        }
    }

    private int CalcSerializedSize()
    {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (hasOpen)
        {
            size += pb::CodedOutputStream.ComputeDoubleSize(1, Open);
        }
        if (hasClose)
        {
            size += pb::CodedOutputStream.ComputeDoubleSize(2, Close);
        }
        if (hasHigh)
        {
            size += pb::CodedOutputStream.ComputeDoubleSize(3, High);
        }
        if (hasLow)
        {
            size += pb::CodedOutputStream.ComputeDoubleSize(4, Low);
        }
        if (hasVolume)
        {
            size += pb::CodedOutputStream.ComputeInt64Size(5, Volume);
        }
        if (hasUtcTimestamp)
        {
            size += pb::CodedOutputStream.ComputeInt64Size(6, UtcTimestamp);
        }
        if (hasPeriod)
        {
            size += pb::CodedOutputStream.ComputeEnumSize(7, (int)Period);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
    }
    public static ProtoOATrendbar ParseFrom(pb::ByteString data)
    {
        return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ProtoOATrendbar ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry)
    {
        return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ProtoOATrendbar ParseFrom(byte[] data)
    {
        return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ProtoOATrendbar ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry)
    {
        return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ProtoOATrendbar ParseFrom(global::System.IO.Stream input)
    {
        return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ProtoOATrendbar ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
    {
        return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ProtoOATrendbar ParseDelimitedFrom(global::System.IO.Stream input)
    {
        return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ProtoOATrendbar ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
    {
        return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ProtoOATrendbar ParseFrom(pb::ICodedInputStream input)
    {
        return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ProtoOATrendbar ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
    {
        return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ProtoOATrendbar MakeReadOnly()
    {
        return this;
    }

    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ProtoOATrendbar prototype)
    {
        return new Builder(prototype);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<ProtoOATrendbar, Builder>
    {
        protected override Builder ThisBuilder
        {
            get { return this; }
        }
        public Builder()
        {
            result = DefaultInstance;
            resultIsReadOnly = true;
        }
        internal Builder(ProtoOATrendbar cloneFrom)
        {
            result = cloneFrom;
            resultIsReadOnly = true;
        }

        private bool resultIsReadOnly;
        private ProtoOATrendbar result;

        private ProtoOATrendbar PrepareBuilder()
        {
            if (resultIsReadOnly)
            {
                ProtoOATrendbar original = result;
                result = new ProtoOATrendbar();
                resultIsReadOnly = false;
                MergeFrom(original);
            }
            return result;
        }

        public override bool IsInitialized
        {
            get { return result.IsInitialized; }
        }

        protected override ProtoOATrendbar MessageBeingBuilt
        {
            get { return PrepareBuilder(); }
        }

        public override Builder Clear()
        {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
        }

        public override Builder Clone()
        {
            if (resultIsReadOnly)
            {
                return new Builder(result);
            }
            else
            {
                return new Builder().MergeFrom(result);
            }
        }

        public override pbd::MessageDescriptor DescriptorForType
        {
            get { return global::ProtoOATrendbar.Descriptor; }
        }

        public override ProtoOATrendbar DefaultInstanceForType
        {
            get { return global::ProtoOATrendbar.DefaultInstance; }
        }

        public override ProtoOATrendbar BuildPartial()
        {
            if (resultIsReadOnly)
            {
                return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
        }

        public override Builder MergeFrom(pb::IMessage other)
        {
            if (other is ProtoOATrendbar)
            {
                return MergeFrom((ProtoOATrendbar)other);
            }
            else
            {
                base.MergeFrom(other);
                return this;
            }
        }

        public override Builder MergeFrom(ProtoOATrendbar other)
        {
            if (other == global::ProtoOATrendbar.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasOpen)
            {
                Open = other.Open;
            }
            if (other.HasClose)
            {
                Close = other.Close;
            }
            if (other.HasHigh)
            {
                High = other.High;
            }
            if (other.HasLow)
            {
                Low = other.Low;
            }
            if (other.HasVolume)
            {
                Volume = other.Volume;
            }
            if (other.HasUtcTimestamp)
            {
                UtcTimestamp = other.UtcTimestamp;
            }
            if (other.HasPeriod)
            {
                Period = other.Period;
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
        }

        public override Builder MergeFrom(pb::ICodedInputStream input)
        {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
        }

        public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
        {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name))
            {
                if (tag == 0 && field_name != null)
                {
                    int field_ordinal = global::System.Array.BinarySearch(_protoOATrendbarFieldNames, field_name, global::System.StringComparer.Ordinal);
                    if (field_ordinal >= 0)
                        tag = _protoOATrendbarFieldTags[field_ordinal];
                    else
                    {
                        if (unknownFields == null)
                        {
                            unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                        }
                        ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                        continue;
                    }
                }
                switch (tag)
                {
                    case 0:
                        {
                            throw pb::InvalidProtocolBufferException.InvalidTag();
                        }
                    default:
                        {
                            if (pb::WireFormat.IsEndGroupTag(tag))
                            {
                                if (unknownFields != null)
                                {
                                    this.UnknownFields = unknownFields.Build();
                                }
                                return this;
                            }
                            if (unknownFields == null)
                            {
                                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                            }
                            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                            break;
                        }
                    case 9:
                        {
                            result.hasOpen = input.ReadDouble(ref result.open_);
                            break;
                        }
                    case 17:
                        {
                            result.hasClose = input.ReadDouble(ref result.close_);
                            break;
                        }
                    case 25:
                        {
                            result.hasHigh = input.ReadDouble(ref result.high_);
                            break;
                        }
                    case 33:
                        {
                            result.hasLow = input.ReadDouble(ref result.low_);
                            break;
                        }
                    case 40:
                        {
                            result.hasVolume = input.ReadInt64(ref result.volume_);
                            break;
                        }
                    case 48:
                        {
                            result.hasUtcTimestamp = input.ReadInt64(ref result.utcTimestamp_);
                            break;
                        }
                    case 56:
                        {
                            object unknown;
                            if (input.ReadEnum(ref result.period_, out unknown))
                            {
                                result.hasPeriod = true;
                            }
                            else if (unknown is int)
                            {
                                if (unknownFields == null)
                                {
                                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                                }
                                unknownFields.MergeVarintField(7, (ulong)(int)unknown);
                            }
                            break;
                        }
                }
            }

            if (unknownFields != null)
            {
                this.UnknownFields = unknownFields.Build();
            }
            return this;
        }


        public bool HasOpen
        {
            get { return result.hasOpen; }
        }
        public double Open
        {
            get { return result.Open; }
            set { SetOpen(value); }
        }
        public Builder SetOpen(double value)
        {
            PrepareBuilder();
            result.hasOpen = true;
            result.open_ = value;
            return this;
        }
        public Builder ClearOpen()
        {
            PrepareBuilder();
            result.hasOpen = false;
            result.open_ = 0D;
            return this;
        }

        public bool HasClose
        {
            get { return result.hasClose; }
        }
        public double Close
        {
            get { return result.Close; }
            set { SetClose(value); }
        }
        public Builder SetClose(double value)
        {
            PrepareBuilder();
            result.hasClose = true;
            result.close_ = value;
            return this;
        }
        public Builder ClearClose()
        {
            PrepareBuilder();
            result.hasClose = false;
            result.close_ = 0D;
            return this;
        }

        public bool HasHigh
        {
            get { return result.hasHigh; }
        }
        public double High
        {
            get { return result.High; }
            set { SetHigh(value); }
        }
        public Builder SetHigh(double value)
        {
            PrepareBuilder();
            result.hasHigh = true;
            result.high_ = value;
            return this;
        }
        public Builder ClearHigh()
        {
            PrepareBuilder();
            result.hasHigh = false;
            result.high_ = 0D;
            return this;
        }

        public bool HasLow
        {
            get { return result.hasLow; }
        }
        public double Low
        {
            get { return result.Low; }
            set { SetLow(value); }
        }
        public Builder SetLow(double value)
        {
            PrepareBuilder();
            result.hasLow = true;
            result.low_ = value;
            return this;
        }
        public Builder ClearLow()
        {
            PrepareBuilder();
            result.hasLow = false;
            result.low_ = 0D;
            return this;
        }

        public bool HasVolume
        {
            get { return result.hasVolume; }
        }
        public long Volume
        {
            get { return result.Volume; }
            set { SetVolume(value); }
        }
        public Builder SetVolume(long value)
        {
            PrepareBuilder();
            result.hasVolume = true;
            result.volume_ = value;
            return this;
        }
        public Builder ClearVolume()
        {
            PrepareBuilder();
            result.hasVolume = false;
            result.volume_ = 0L;
            return this;
        }

        public bool HasUtcTimestamp
        {
            get { return result.hasUtcTimestamp; }
        }
        public long UtcTimestamp
        {
            get { return result.UtcTimestamp; }
            set { SetUtcTimestamp(value); }
        }
        public Builder SetUtcTimestamp(long value)
        {
            PrepareBuilder();
            result.hasUtcTimestamp = true;
            result.utcTimestamp_ = value;
            return this;
        }
        public Builder ClearUtcTimestamp()
        {
            PrepareBuilder();
            result.hasUtcTimestamp = false;
            result.utcTimestamp_ = 0L;
            return this;
        }

        public bool HasPeriod
        {
            get { return result.hasPeriod; }
        }
        public global::ProtoOATrendbarPeriod Period
        {
            get { return result.Period; }
            set { SetPeriod(value); }
        }
        public Builder SetPeriod(global::ProtoOATrendbarPeriod value)
        {
            PrepareBuilder();
            result.hasPeriod = true;
            result.period_ = value;
            return this;
        }
        public Builder ClearPeriod()
        {
            PrepareBuilder();
            result.hasPeriod = false;
            result.period_ = global::ProtoOATrendbarPeriod.M1;
            return this;
        }
    }
    static ProtoOATrendbar()
    {
        object.ReferenceEquals(global::OpenApiModelMessages.Descriptor, null);
    }
}

#endregion


#endregion Designer generated code
